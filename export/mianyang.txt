module.exports = {
  env: {
    browser: true,
    node: true,
    "vue/setup-compiler-macros": true,
  },
  extends: [
    "airbnb-base",
    "plugin:vue/vue3-recommended",
    "plugin:tailwindcss/recommended",
  ],
  globals: {
    ElMessage: true,
    ElMessageBox: true,
  },
  parserOptions: {},
  plugins: ["vue", "tailwindcss"],
  // add your custom rules here
  rules: {
    "import/extensions": "off",
    "import/no-extraneous-dependencies": [0, { "packageDir ": "./src/" }],
    "max-len": [
      "error",
      {
        code: 160,
        ignorePattern: 'class="([\\s\\S]*?)"|d="([\\s\\S]*?)"', // ignore classes or svg draw attributes
        ignoreUrls: true,
      },
    ],
    "vue/multi-word-component-names": "off",
    "object-curly-newline": "off",
    "no-use-before-define": ["error", { functions: false }],
    "linebreak-style": ["off", "windows"],
    "vue/html-self-closing": [
      "error",
      {
        html: {
          normal: "never",
          void: "always",
          component: "any",
        },
      },
    ],
    indent: ["error", 2, { SwitchCase: 1 }],
    semi: "off",
    quotes: "off",
    "global-require": "off",
    "no-console": "off",
    "comma-dangle": "off",
    "prefer-destructuring": "off",
    "space-before-function-paren": [
      "error",
      {
        anonymous: "never",
        named: "never",
        asyncArrow: "always",
      },
    ],
    "no-param-reassign": ["error", { props: false }],
    "no-plusplus": ["error", { allowForLoopAfterthoughts: true }],
    "vue/singleline-html-element-content-newline": "off",
    "vue/max-attributes-per-line": [
      "error",
      {
        singleline: 10,
        multiline: 1,
      },
    ],
    "tailwindcss/no-custom-classname": 0,
  },
  overrides: [
    {
      files: ["src/components/**/*.vue", "src/vastio/**/*.vue"],
    },
  ],
  settings: {
    "import/resolver": {
      node: {
        extensions: [".js", ".jsx", ".ts", ".tsx", ".vue", "svg"],
        moduleDirectory: ["node_modules", "src/"],
      },
      alias: {
        extensions: [".js", ".jsx", ".ts", ".tsx", ".vue", "svg"],
        map: [["@", "./src"]],
      },
    },
  },
};
<!DOCTYPE html>
<html lang="zh">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" href="/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>防火监督岗位工作绩效评价系统</title>
</head>

<body>
  <div id="app"></div>
  <script type="module" src="/src/main.js"></script>
</body>
</html>
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import eslint from "vite-plugin-eslint";
import { resolve } from "path";
import Pages from "vite-plugin-pages";
import Layouts from "vite-plugin-vue-layouts";

import AutoImport from "unplugin-auto-import/vite";
import Components from "unplugin-vue-components/vite";
import { ElementPlusResolver } from "unplugin-vue-components/resolvers";

export default defineConfig({
  plugins: [
    eslint({ cache: false }),
    vue(),
    Pages({
      dirs: [
        {
          dir: "src/views",
          baseRoute: "/",
        },
      ],
      exclude: ["**/components/*.vue"],
    }),
    Layouts({
      layoutsDirs: "src/vastio/layouts", // npm文档里的参数写错了
      defaultLayout: "Default",
    }),
    AutoImport({
      resolvers: [ElementPlusResolver()],
    }),
    Components({
      resolvers: [ElementPlusResolver()],
    }),
  ],
  resolve: {
    alias: {
      "@": resolve(__dirname, "src"),
    },
  },
  envPrefix: "VASTIO_", // 修改env变量的前缀
  server: {
    open: true,
    port: 3001,
    proxy: {
      // 根据实际情况配置
      "^/(api|callback)": {
        target: "http://172.16.60.170:8398/",
        changeOrigin: true,
        // rewrite: (path) => path.replace(/^\/api/, "")
      },
      // 登出
      "^/(logout)": {
        target: "http://172.16.60.132:11101/",
        changeOrigin: true,
      },
    },
  },
});
module.exports = {
  content: ["./index.html", "./src/**/*.{vue,js,ts,jsx,tsx}"],
  theme: {
    fontFamily: {
      sans: ["system-ui", "-apple-system", "Helvetica", "Tahoma", "Arial", "PingFang SC", "STXihei", "Microsoft YaHei", "WenQuanYi Micro Hei", "sans-serif"],
    },
    fontSize: {
      xs: "0.75rem",
      sm: "0.875rem",
      base: "1rem",
      lg: "1.125rem",
      xl: "1.5rem",
      "2xl": "2rem",
    },
    colors: {
      white: '#FFFFFF',
      black: '#000000',
      dp: {
        black: '#001E3A',
        blue: '#42BAFF',
        blue2: '#62C1ED',
        blue3: '#A0DCFF',
        gold: '#EDC662',
        silver: '#A7C6E3',
        coppery: '#CB7747'
      },
      "base-400": "#404a6b",
      // 线条色
      "line-100": "#f0f1f4",
      "line-200": "#e4e6ea",
      "line-300": "#bcbfcb",
      chart: {
        100: "#3CA272",
        200: "#91CD75",
        300: "#FAC859",
        400: "#FC8452",
        500: "#EE6766",
        600: "#73C0DE",
        700: "#546FC6",
        800: "#9A60B4",
        900: "#C1C1C1",
      },
      "base-500": "#7A8098",
    },
    extend: {
      boxShadow: {
        base: "0px 0px 10px 0px rgba(0, 0, 0, 0.03)",
        card: "0px 0px 10px 0px rgba(0, 0, 0, 0.08)",
      },
    },
  },
  plugins: [require("daisyui")],
  daisyui: {
    themes: [
      {
        mytheme: {
          primary: "#4794FE",
          "primary-focus": "#066dfe",
          "primary-content": "#ffffff",
          secondary: "#bcbfcb",
          "secondary-focus": "#8f94a8",
          "secondary-content": "#ffffff",
          accent: "#ffffff",
          "accent-focus": "#4794FE",
          "accent-content": "#404a6b",
          // #798097规范里暂时没有，暂时设置在这
          neutral: "#798097",
          // 背景色
          "base-100": "#ffffff",
          "base-200": "#f8f8f8",
          "base-300": "#eef4fe",
          "base-content": "#2D344A",
          // 状态色
          info: "#4794FE",
          success: "#3CA272",
          warning: "#fc8452",
          error: "#EE6766",
          "--padding-card": "1.25rem",
          "--rounded-box": "0.25rem",
          "--rounded-btn": "0.25rem",
        },
      },
    ],
  },
};
<script setup>
import { reactive } from "vue";
import zhCn from 'element-plus/dist/locale/zh-cn.mjs'
import { storeToRefs } from "pinia";
import systemStore from "@/store";

const { user, menus } = storeToRefs(systemStore())
const SYSTEM_TITLE = '防火监督岗位工作绩效评价系统'

const CONFIG_PROVIDER = reactive({
  locale: zhCn,
  size: 'large'
})

function logoutAccount() {
  systemStore().logout()
}
</script>

<template>
  <el-config-provider :locale="CONFIG_PROVIDER.locale" :size="CONFIG_PROVIDER.size">
    <router-view :menus="menus" :title="SYSTEM_TITLE" :user="user.name" class="min-w-[1440px]" @logout="logoutAccount"> </router-view>
  </el-config-provider>
  <!-- <router-view v-slot="{ Component, route }">
    <component :is="Component" v-if="menus.length" :key="route" :menus="menus" />
  </router-view> -->
</template>

import axios from "axios";

axios.defaults.timeout = 60000; // 60s的超时验证

// 创建一个axios实例
const instance = axios.create({});
axios.interceptors.request.use = instance.interceptors.request.use;

// request拦截器
instance.interceptors.request.use(
  (config) => config,
  (err) => Promise.reject(err)
);
// response拦截器
instance.interceptors.response.use(
  (response) => {
    if (response.data.code !== 200) {
      if (response.data.code === 401) {
        // window.location.href = "/login";
        window.location.href = response.data.login;
      } else {
        // 错误提示
        // VMessage.error(response?.data?.message)
        throw new Error(response?.data?.message)
      }
    }
    return response.data;
  },
  (error) => Promise.reject(error.response)
);

export default instance;

import 'default-passive-events'

import "./assets/styles/main.less";

import { createApp } from "vue";
import { createPinia } from "pinia";
import "element-plus/es/components/message/style/css";
import "element-plus/es/components/loading/style/css"
import { ElMessage } from "element-plus";
import router from "./router";
import App from "./App.vue";

const app = createApp(App);

app.use(createPinia());
app.component("ElMessage", ElMessage);
app.use(router);

app.mount("#app");

import api from "@/axios";
import Resource from "./restful";

class Demo extends Resource {
  // constructor(...opts) {
  //   super(...opts);
  // }

  // eslint-disable-next-line class-methods-use-this
  getSome(params) {
    // eslint规范要求常规函数必须要用this,否则就会报错,根据实际情况处理
    // this.params=params
    return api.get(`/api/some.json`, {
      params,
    });
  }
}

export default new Demo("/api/demo");
import api from "@/axios";

/* 获取指标 */
export const getMeasures = () => api.get("/api/measures");

/* 获取指标及填报内容 */
export const getMeasureRes = (params) => api.get("/api/measures/result", { params });

/* 根据人员ID获取指标及填报内容 */
export const getMeasureResById = (id, params) => api.get(`/api/measures/result/${id}`, { params });

/* 获取大队月度考评 */
export const getMonthRatingList = (params) => api.get("/api/rating-commit", { params });

/* 获取大队考评列表 */
export const getRatingList = (params) => api.get("/api/rating-commit/evaluate", { params });

/* 文件上传接口 */
// export const uploadReportFile = () => api.post("/api/upload/file")

/* 文件下载接口 */
export const downloadReportFile = (fileId) => `/api/download/file?id=${fileId}`;

/* 删除附件 */
export const deleteReportFile = (id) => api.delete(`/api/metric/file/${id}`)

/* 保存填报结果 */
export const saveRatingMetric = (data) => api.post("/api/metric", data)

/* 删除填报项 */
export const deleteRatingMetric = (id) => api.delete(`/api/metric/${id}`)

/* 提交填报结果 */
export const commitRating = (data) => api.post("/api/rating-commit/commit", data)

/* 非member提交修改结果 */
export const leaderModifyCommit = (data) => api.post("/api/rating-commit/modify", data)

/* 修改提交结果 */
export const modifyCommittedRating = (data) => api.post("/api/rating-commit/modify-score", data)

/* 新增指标 */
export const addMeasure = (data) => api.post("/api/measures", data)

/* 修改指标 */
export const editMeasure = (data) => api.put("/api/measures", data)

/* 删除指标 */
export const delMeasure = (id) => api.delete(`/api/measures/${id}`)

import api from "@/axios";

export default class Resource {
  constructor(url, readonly = false) {
    this.url = url;
    this.readonly = readonly;
    if (this.url.endsWith("/")) {
      this.url = this.url.slice(0, -1);
    }
  }

  list(params) {
    return api.get(this.url, {
      params,
    });
  }

  get(id) {
    return api.get(`${this.url}/${id}`);
  }

  update(data) {
    if (this.readonly) {
      throw new Error("不支持此方法");
    }
    // return api.put(`${this.url}/${id}`, data);
    return api.put(`${this.url}`, data);
  }

  create(data) {
    if (this.readonly) {
      throw new Error("不支持此方法");
    }
    return api.post(this.url, data);
  }

  delete(id) {
    if (this.readonly) {
      throw new Error("不支持此方法");
    }
    return api.delete(`${this.url}/${id}`);
  }
}

import api from "@/axios";
import qs from "qs";

// 登录
export const login = (data) => api.post(
  "/login",
  qs.stringify(data, {
    arrayFormat: "repeat",
  })
);

// 登出
export const logout = () => api.get("/logout");

// 获取当前用户
export const getUser = () => api.get("/api/currentUser");

// 获取系统配置
export const getSystemConfig = () => api.get("/api/system-config")
import api from "@/axios";

/* 个人排名趋势 */
export const getSelfMemberMonthRanking = (params) => api.get("/api/rank-trend/person", { params })

/* 人员月度排名 */
export const getMemberMonthlyRanking = (params) => api.get("/api/month/rank/person", { params })

/* 人员年度排名 */
export const getMemberYearlyRanking = (params) => api.get("/api/year/rank/person", { params })

/* 机构月度排名 */
export const getGroupMonthlyRanking = (params) => api.get("/api/month/rank/org", { params })

/* 机构年度排名 */
export const getGroupYearlyRanking = (params) => api.get("/api/year/rank/org", { params })

/* 大队指标分数 */
export const getGroupMeasure = (params) => api.get("/api/measure-score/org", { params })

/* 大队人员分数 */
export const getPersonMeasureWithGroup = (params) => api.get("/api/measure-score/person", { params })

/* 历史均分趋势 */
export const getOrgYearlyAvgMeasures = (params) => api.get("/api/avg-score", { params })

/* 历史得分趋势 */
export const getOrgYearlyScore = (params) => api.get("/api/rank-trend/org", { params })

/* 根据code获取指标分数 */
export const getScoreByCode = (params) => api.get("/api/analysis/measure-score", { params })

/* 获取指标及机构得分 */
export const getMeasuresByOrgId = (params) => api.get("/api/measures/org", { params })

/* 按机构获取指标得分情况 */
export const getAllMeasuresByOrgId = (params) => api.get("/api/measures/org/all", { params })

/* 填报分数by code */
export const getAllMetricScore = (params) => api.get("/api/analysis/metric-score", { params })
<template>
  <vastio-card class="flex h-[72px] items-center justify-between rounded p-4 text-sm font-semibold text-base-400">
    <div class="flex items-center">
      <div
        class="main-icon mr-2 flex items-center justify-center rounded-full"
        :style="{ backgroundImage: iconBgUrl }"
      >
        <vastio-icon :name="data.icon" :size="38" :color="data.iconColor ?? '#FFFFFF'" />
      </div>
      <span>{{ data.title }}</span><slot name="explain"></slot>
    </div>
    <span class="mr-2 text-xl">
      <span v-if="!isNaN(Number(data.value))">
        <count-to :start-val="0" :end-val="handledData.value" :decimals="handledData.decimals" :duration="1500" separator=""></count-to>
        <span class="text-sm">{{ handledData.label }}</span>
      </span>
      <span v-else class="text-lg">暂无数据</span>
    </span>
  </vastio-card>
</template>

<script setup>
import { CountTo } from 'vue3-count-to';
import { computed } from "vue";
import iconBgPng from '../assets/images/icon-bg.png'

const iconBgUrl = `url(${iconBgPng})`

const props = defineProps({
  data: {
    type: Object,
    default: () => {},
    required: true
  },
  decimals: {
    type: Number,
    default: 2
  }
});

const handledData = computed(() => {
  const value = Number(props.data.value)
  if (value >= 100000) return { value: value / 10000, label: '万', decimals: 2 }
  return { value, label: '', decimals: props.decimals }
})
</script>

<style scoped>
.main-icon {
  min-width: 40px;
  height: 40px;
}
</style>
<template>
  <div class="auto-overflow-y w-full h-full">
    <div class="title mb-4">
      {{ title }}
    </div>
    <div style="height: calc( 100% - 40px )" class="auto-overflow-y overflow-x-hidden">
      <slot></slot>
    </div>
  </div>
</template>

<script setup>
defineProps({
  title: {
    type: String,
    default: '默认标题',
    required: true
  }
})
</script>

<style scoped>
.title {
  @apply pl-4 relative font-semibold text-base;
}

.title::before {
  content: '';
  @apply bg-dp-blue w-1 h-4 absolute left-0 top-1/2 -translate-y-1/2;
}
</style>
import api from "@/axios";
import Resource from "./restful";

/* 日志接口  trace/collect */
export const getLog = (type, params) => api.get(`/api/log/${type}`, { params }) // 操作日志列表
/* 系统用户接口 */
export const systemUser = new Resource("/api/user")
/* 防火监督人员列表 */
export const systemMember = new Resource("/api/person")
/* 消监账号列表 */
export const systemXfjd = new Resource("/api/person/xfjd")
<template>
  <vastio-card class="flex h-[72px] items-center justify-between p-1 text-sm">
    <div class="h-[64px] w-[254px] rounded-sm bg-base-200 text-center text-lg font-semibold leading-[64px]">
      {{ data.label }}
    </div>
    <div class="flex items-center px-2">
      <span class="mr-3">填报时间：</span>
      <span>{{ data.startTime }} ～ {{ data.endTime }}</span>
    </div>
    <div class="h-10 w-px bg-line-200"></div>
    <div class="justify-space-around flex max-w-[284px] items-center px-2">
      <span class="mr-3">填报状态：</span>
      <div class="h-6 w-[74px] rounded-xl border border-primary bg-base-300 text-center leading-6 text-primary">
        {{ data.personCount === data.commitCount ? '已填报' : '填报中' }}
      </div>
    </div>
    <div class="h-10 w-px bg-line-200"></div>
    <div class="flex min-w-[30%] justify-center px-2">
      <span class="mr-3">填报进度：</span>
      <el-progress :percentage="handlePercent(data.commitCount, data.personCount)" color="#4793FE" class="flex-1">
        <span class="ml-3">{{ data.commitCount + '/' + data.personCount }}</span>
      </el-progress>
    </div>
    <div class="flex pr-5">
      <div class="mr-4 h-10 w-px bg-line-200"></div>
      <slot name="options"></slot>
    </div>
  </vastio-card>
</template>

<script setup>
defineProps({
  data: {
    type: Object,
    required: true,
    default: () => ({ label: '', startTime: '', endTime: '', personCount: 1, commitCount: 0 })
  }
})
/* 处理填报进度百分比 */
function handlePercent(molecule, denominator) {
  try {
    return (Number(molecule) / Number(denominator)) * 100
  } catch (err) {
    console.log(err);
    return 0
  }
}
</script>

<style scoped>

</style>
<template>
  <div class="grid-filter flex items-center space-x-6 text-sm">
    <div class="flex items-center">
      <span class="mr-3 w-[70px]">{{ filterLabel[0] }}：</span>
      <span class="w-60">
        <el-select v-model="filter.type" @change="changeType">
          <el-option v-for="item in REPORT_TYPE" :key="item.value" :label="item.label" :value="item.value" />
        </el-select>
      </span>
    </div>
    <div class="flex items-center">
      <span class="mr-3 w-[70px]">{{ filterLabel[1] }}：</span>
      <span class="w-60">
        <el-date-picker
          v-if="filter.type === 'year'"
          v-model="filter.year"
          type="year"
          placeholder="请选择年份"
          :clearable="false"
          format="YYYY年"
          value-format="YYYY"
          :disabled-date="disabledDate"
        />
        <el-date-picker
          v-else
          v-model="filter.month"
          type="month"
          placeholder="请选择月份"
          :clearable="false"
          format="YYYY年MM月"
          value-format="YYYY-MM"
          :disabled-date="disabledDate"
        />
      </span>
    </div>
    <vastio-button type="primary" @click="updateFilter">查询</vastio-button>
  </div>
</template>

<script setup>
import { onBeforeMount, reactive, watch } from "vue";
import dayjs from "dayjs";
import systemStore from "@/store";

const { disabledDate } = systemStore()
const props = defineProps({
  role: {
    type: String,
    default: 'member',
    required: true
  },
  modelValue: {
    type: Object,
    default: () => {}
  }
})

/* 考核类型 | 统计周期 */
const REPORT_TYPE = [{ label: '月度', value: 'month' }, { label: '年度', value: 'year' }]

/* 过滤器的label显示 */
// member: ['统计周期', '统计时段']
// others: ['考核类型', '考核时段']
const filterLabel = reactive([])

const filter = reactive({ type: '', year: '', month: '' })

const emit = defineEmits(['search', 'update:modelValue'])

watch(() => props.modelValue, (val) => {
  if (val) {
    filter.type = val.type
    filter.year = val.year
    filter.month = val.month
  } else {
    filter.type = "month"
    filter.year = dayjs().format('YYYY')
    filter.month = dayjs().add(-1, 'month').format('YYYY-MM')
  }
}, { immediate: true, deep: true })

onBeforeMount(() => {
  const { role } = props.role
  if (role === 'member') {
    filterLabel.splice(0, 2, '统计周期', '统计时段')
  } else {
    filterLabel.splice(0, 2, '考核类型', '考核时段')
  }
})

function changeType(type) {
  if (type === 'month') filter.month = dayjs().add(-1, 'month').format('YYYY-MM')
  if (type === 'year') filter.year = dayjs().format('YYYY')
}

function updateFilter() {
  emit('search', { ...filter })
  emit('update:modelValue', { ...filter })
}

defineExpose({ updateFilter })
</script>

<style scoped>

</style>
import useDebounce from './useDebounce'
import useMethod from './useMethod'

export {
  useDebounce,
  useMethod,
}
/*
 * @Author: Qian Xiaolei
 * @Date: 2022年10月20日 16:06:38
 * @Description: 节流和防抖
 */
export default function useDebounce() {
  // 节流
  const throttle = (func, ms, ...args) => {
    let previous = 0;
    return () => {
      const now = Date.now();
      const context = this;
      if (now - previous > ms) {
        func.apply(context, args);
        previous = now;
      }
    }
  }

  // 防抖
  const debounce = (func, ms, ...args) => {
    let timeout;
    return () => {
      const context = this;
      if (timeout) clearTimeout(timeout);

      timeout = setTimeout(() => {
        func.apply(context, args)
      }, ms);
    }
  }

  return { throttle, debounce }
}
/*
* 生成一个随机n位字符串 (1<=n<=11)
* */
const randomString = (n) => Math.random().toString(36).slice(11 - n + 2)

export default () => ({ randomString })
/*
 * @Description: 公用方法
* */
import dayjs from "dayjs";

/*
* 传参 Date
* 判断日期是否可选
* */
export const disabledDate = (date) => dayjs(date).unix() > dayjs().add(-1, "month").unix()

/* 处理小数的小数位数 */
export const handleNum = (num) => (String(num).indexOf(".") > -1 ? num.toFixed(2) : num)

export default { disabledDate, handleNum }

import * as dayjs from "dayjs";

export default {
  truncate(value, length = 15) {
    if (!value || typeof value !== "string") {
      return "";
    }
    if (value.length <= length) {
      return value;
    }
    return `${value.substring(0, length)}...`;
  },

  percent(value, decimals = 2, multiplier = 100) {
    const safeValue = value === null || Number.isNaN(value) ? 0 : value;

    return `${(safeValue * multiplier).toFixed(decimals)}%`;
  },

  datetime(value, replace, format = "YYYY-MM-DD HH:mm") {
    if (value === null || typeof value === "undefined") {
      return replace || "-";
    }

    const dateValue = value instanceof Date ? value : new Date(value);
    return dayjs(dateValue).format(format);
  },

  date(value, replace, format = "YYYY-MM-DD") {
    if (value === null || typeof value === "undefined") {
      return replace || "-";
    }

    const dateValue = value instanceof Date ? value : new Date(value);
    return dayjs(dateValue).format(format);
  },

  number(value) {
    if (value === null || Number.isNaN(value)) {
      return value;
    }
    return new Intl.NumberFormat().format(value);
  },
};

import { defineStore } from "pinia";
import { getSystemConfig, getUser, login } from "@/api/login";
import { systemMember } from "@/api/system";
import dayjs from "dayjs";

const systemStore = defineStore("system", {
  state: () => ({
    isLogin: false,
    user: {},
    groupList: [
      { value: '51006201', label: '涪城大队' },
      { value: '51006202', label: '游仙大队' },
      { value: '51006203', label: '高新大队' },
      { value: '51006221', label: '江油大队' },
      { value: '51006222', label: '三台大队' },
      { value: '51006223', label: '安州大队' },
      { value: '51006224', label: '梓潼大队' },
      { value: '51006225', label: '盐亭大队' },
      { value: '51006226', label: '平武大队' },
      { value: '51006227', label: '北川大队' },
    ],
    menus: [],
    roleMap: {
      manage: { webRole: "manage", label: '系统管理员', explain: '提供系统所有的操作功能' },
      zhidui: { webRole: "branch", label: '支队领导', explain: '查看本大队下各人员指标评分，审核修订本大队防火干部提交的指标数据和文件' },
      dadui: { webRole: "group", label: '大队领导', explain: '查看本大队下各人员指标评分，审核修订本大队防火干部提交的指标数据和文件' },
      geren: { webRole: "member", label: '大队防火干部', explain: '查看本人指标考核明细，填报本人的考核指标' },
      base: { webRole: "member", label: '基础人员', explain: '查看本人指标考核明细，填报本人的考核指标' },
    },
    roleList: [
      { label: '支队领导', value: 'zhidui' },
      { label: '大队领导', value: 'dadui' },
      { label: '大队防火干部', value: 'geren' },
      { label: '管理员', value: 'manage' }
    ],
    commitDate: '',
    disabledDate: null, // 时间选择器可选范围
    submitDisabledDate: null, // 提交、查看个人考核可选范围
    memberCount: 0,
    scoreMethodOption: [
      { label: '直接输入', value: 'direct', source: 'all' },
      { label: '固定分数', value: 'fixed', source: 'all' },
      { label: '相对值打分', value: 'scale', source: 'all' },
      { label: '分段打分', value: 'step', source: 'all' },
      { label: '选项打分', value: 'option', source: 'all' },
      { label: '均值比较', value: 'compare', source: 'collect' }
    ]
  }),
  actions: {
    login(username, password) {
      return new Promise((resolve) => {
        login({ username, password }).then(({ results }) => {
          this.renderUser(results);
          resolve();
        });
      });
    },
    async getUser() {
      const { results } = await getUser()
      this.renderUser(results);
    },
    async getAllMember() {
      const { total } = await systemMember.list()
      this.memberCount = total
    },
    async getGlobalConfig() {
      const { results } = await getSystemConfig()
      this.commitDate = results[0].value
      this.disabledDate = (date) => {
        const systemStartTime = results[1].value
        return (dayjs(date).unix() > dayjs()
        // .add(-1, "month")
          .unix())
         || (dayjs(date).unix() < dayjs(systemStartTime).unix())
      }
      this.submitDisabledDate = (date) => {
        const systemStartTime = results[1].value
        return (dayjs(date).unix() > dayjs().unix())
          || (dayjs(date).unix() < dayjs(systemStartTime).unix())
      }
    },
    renderUser(data) {
      // 初始化user
      this.isLogin = true;
      const user = data[0];
      user.groupName = this.groupList.find((item) => item.value === user.dwid)?.label
      // 用户信息 role(member成员，group大队，branch支队, manage管理员)
      user.role = this.roleMap[user.role]?.webRole || 'member'
      this.user = user
      this.renderMenus(user)
    },
    renderMenus(user) {
      const MEMBER_MENUS = [
        { id: 1, name: "总览", icon: "icon-zonglan", url: "/", },
        { id: 3, name: "考核填报", icon: "icon-tubiaokaohetianbao", url: "/reportsubmit/report", },
      ]
      const GROUP_MENUS = [
        { id: 1, name: "总览", icon: "icon-zonglan", url: "/", },
        { id: 2, name: "质态分析", icon: "icon-zhitaifenxi", url: "/qualityanalysis", },
        { id: 3, name: "考核填报", icon: "icon-tubiaokaohetianbao", url: "/reportsubmit/auditlist", },
      ]
      const BRANCH_MENUS = [
        { id: 1, name: "总览", icon: "icon-zonglan", url: "/", },
        { id: 2, name: "质态分析", icon: "icon-zhitaifenxi", url: "/qualityanalysis", },
        { id: 3, name: "考核填报", icon: "icon-tubiaokaohetianbao", url: "/reportsubmit/auditlist", },
        { id: 4, name: "指标管理", icon: "icon-zhibiaoguanli", url: "/reportadmin", },
        { id: 5, name: "质态大屏", icon: "icon-zhibiaoguanli", url: "/bigscreen", },
      ]
      const FULL_MENUS = [
        { id: 1, name: "总览", icon: "icon-zonglan", url: "/", },
        { id: 2, name: "质态分析", icon: "icon-zhitaifenxi", url: "/qualityanalysis", },
        { id: 3, name: "考核填报", icon: "icon-tubiaokaohetianbao", url: "/reportsubmit/auditlist", },
        { id: 4, name: "指标管理", icon: "icon-zhibiaoguanli", url: "/reportadmin", },
        {
          id: 5,
          name: "系统管理",
          icon: "icon-xitongguanli",
          children: [
            { id: 51, name: "用户管理", icon: "icon-yonghuguanli", url: "/systemadmin/useradmin", },
            { id: 52, name: "考评对象管理", icon: "icon-yonghuguanli", url: "/systemadmin/memberadmin", },
            { id: 53, name: "角色管理", icon: "icon-jiaoseguanli", url: "/systemadmin/roleadmin", },
            { id: 54, name: "日志管理", icon: "icon-rizhiguanli", url: "/systemadmin/logadmin", }
          ]
        },
        { id: 6, name: "质态大屏", icon: "icon-zhibiaoguanli", url: "/bigscreen", },
      ]
      const menusMap = { member: MEMBER_MENUS, group: GROUP_MENUS, branch: BRANCH_MENUS, manage: FULL_MENUS }
      this.menus = menusMap[user.role]
    },
    logout() {
      // 登出
      window.location.replace('/logout')
      // return new Promise((resolve) => {
      //   logout().then(() => {
      //     this.isLogin = false;
      //     resolve();
      //   }).finally(() => {
      //     this.isLogin = false;
      //     window.location.reload()
      //   })
      // });
    },
    getDataByMethodType(type) {
      return this.scoreMethodOption.find(({ value }) => value === type)
    }
  },
});

export default systemStore;

const getAssertsPic = (name) => new URL(`../assets/images/${name}`, import.meta.url).href

const groupBy = (key) => function group(array) {
  return array.reduce((acc, obj) => {
    const property = obj[key];
    acc[property] = acc[property] || [];
    acc[property].push(obj);
    return acc;
  }, {});
}

export { getAssertsPic, groupBy }
/*
* 保留部分数据状态（多为过滤器）
* */
import { defineStore } from "pinia";
import dayjs from "dayjs";

const nowYear = dayjs().format('YYYY')
const lastMonth = dayjs().add(-1, 'month').format('YYYY-MM')
const statusStore = defineStore("status", {
  state: () => ({
    /* 审核列表-过滤状态 */
    auditFilter: { group: '', year: '' },
    /* 支队总览-过滤状态 */
    branchHomeFilter: { type: 'month', year: nowYear, month: lastMonth },
    /* 大队总览-过滤状态 */
    groupHomeFilter: { type: 'month', year: nowYear, month: lastMonth }
  })
});

export default statusStore;

/* eslint-disable import/no-unresolved */

import { createRouter, createWebHistory } from "vue-router";
import systemStore from "@/store";
import { setupLayouts } from "virtual:generated-layouts";
import generatedRoutes from "virtual:generated-pages";
import { VLoading } from "@/lib/useTips"

const routes = setupLayouts(generatedRoutes);
console.log(routes);

const router = createRouter({
  history: createWebHistory(),
  routes,
});

// router导航
router.beforeEach(async (to, from, next) => {
  console.log(new Date().getTime());
  const { isLogin, getUser, getGlobalConfig, getAllMember } = systemStore()
  if (import.meta.env.VASTIO_NO_LOGIN === "1") {
    console.log("no login for debug");
    next();
    return;
  }
  if (to.path === "/login" || isLogin) {
    next();
  } else {
    const loading = VLoading.start()
    await getUser()
    await getGlobalConfig()
    await getAllMember()
    VLoading.close(loading)
    next();
  }
});

export default router;

<script setup>
import { ref } from "vue";

const props = defineProps({
  theme: {
    type: String,
    default: "",
  },
  showBtn: {
    type: Boolean,
    default: false,
  },
});
const themeArr = ["mytheme"];
const theme = ref("");

theme.value = props.theme || localStorage.getItem("data-theme") || "mytheme";
changeTheme();

function changeTheme() {
  localStorage.setItem("data-theme", theme.value);
  document.getElementsByTagName("html")[0].setAttribute("data-theme", theme.value);
}
</script>

<template>
  <div :class="{ hidden: !props.showBtn }" class="fixed right-5 bottom-5 z-30 flex w-44 items-center rounded-lg bg-primary/50 p-2 text-sm text-primary-content">
    主题：
    <el-select v-model="theme" class="flex-1" @change="changeTheme">
      <el-option v-for="item in themeArr" :key="item" :label="item" :value="item"></el-option>
    </el-select>
  </div>
</template>
<template>
  <component :is="COMPONENTS_MAP[user.role]"></component>
</template>

<script setup>
import systemStore from "@/store";
import { storeToRefs } from "pinia";
import Branch from '@/views/HomePage/Branch/Index.vue'
import Group from '@/views/HomePage/Group/Index.vue'
import Member from '@/views/HomePage/Member/Index.vue'

/* 组件映射 */
const COMPONENTS_MAP = {
  manage: Branch,
  branch: Branch,
  group: Group,
  member: Member
}
/* 当前角色身份 */
const { user } = storeToRefs(systemStore())
</script>

<style scoped>

</style>
<template>
  <router-view />
</template>

<script setup>

</script>

<style scoped>

</style>

<route lang="yaml">
meta:
  name: '系统管理'
  sort: 9
  layout: 'Default'
</route>

<template>
  <div class="fixed inset-0 flex flex-col items-center justify-center">
    <svg t="1651828758611" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3124" width="200" height="200">
      <path
        d="M260.266667 789.333333c-21.333333 0-38.4-17.066667-38.4-38.4v-59.733333H38.4c-12.8 0-29.866667-8.533333-34.133333-21.333333-4.266667-17.066667-4.266667-29.866667 4.266666-42.666667l221.866667-294.4c8.533333-12.8 25.6-17.066667 42.666667-12.8 17.066667 4.266667 25.6 21.333333 25.6 38.4v256h34.133333c21.333333 0 38.4 17.066667 38.4 38.4s-17.066667 38.4-38.4 38.4H298.666667v59.733333c0 21.333333-17.066667 38.4-38.4 38.4z m-145.066667-179.2h106.666667V469.333333l-106.666667 140.8zM913.066667 742.4c-21.333333 0-38.4-17.066667-38.4-38.4v-59.733333h-183.466667c-12.8 0-29.866667-8.533333-34.133333-21.333334-8.533333-12.8-4.266667-29.866667 4.266666-38.4l221.866667-294.4c8.533333-12.8 25.6-17.066667 42.666667-12.8 17.066667 4.266667 25.6 21.333333 25.6 38.4v256h34.133333c21.333333 0 38.4 17.066667 38.4 38.4s-17.066667 38.4-38.4 38.4h-34.133333v59.733334c0 17.066667-17.066667 34.133333-38.4 34.133333zM768 567.466667h106.666667V426.666667L768 567.466667zM533.333333 597.333333c-46.933333 0-85.333333-25.6-119.466666-68.266666-29.866667-38.4-42.666667-93.866667-42.666667-145.066667 0-55.466667 17.066667-106.666667 42.666667-145.066667 29.866667-42.666667 72.533333-68.266667 119.466666-68.266666 46.933333 0 85.333333 25.6 119.466667 68.266666 29.866667 38.4 42.666667 93.866667 42.666667 145.066667 0 55.466667-17.066667 106.666667-42.666667 145.066667-34.133333 46.933333-76.8 68.266667-119.466667 68.266666z m0-362.666666c-55.466667 0-98.133333 68.266667-98.133333 149.333333s46.933333 149.333333 98.133333 149.333333c55.466667 0 98.133333-68.266667 98.133334-149.333333s-46.933333-149.333333-98.133334-149.333333z"
        fill="#978CFF"
        p-id="3125"
      />
      <path d="M354.133333 691.2a162.133333 21.333333 0 1 0 324.266667 0 162.133333 21.333333 0 1 0-324.266667 0Z" fill="#E3E5FC" p-id="3126" />
      <path d="M8.533333 832a162.133333 21.333333 0 1 0 324.266667 0 162.133333 21.333333 0 1 0-324.266667 0Z" fill="#E3E5FC" p-id="3127" />
      <path d="M661.333333 797.866667a162.133333 21.333333 0 1 0 324.266667 0 162.133333 21.333333 0 1 0-324.266667 0Z" fill="#E3E5FC" p-id="3128" />
    </svg>
    <div class="text-2xl font-semibold">页面没找到</div>
    <router-link class="btn-primary btn mt-5" to="/">返回首页</router-link>
  </div>
</template>

<route lang="yaml">
meta:
  layout: Empty
</route>
import { ElLoading, ElMessage } from "element-plus";

/* 加载图标SVG */
const svg = `
  <path d="M29.52552,9.65448 C29.22312,9.65448 28.91592,9.57768 28.63512,9.41448 C27.78312,8.92248 27.49032,7.83288 27.98232,6.97848 L29.96712,3.54648 C30.45912,2.69688 31.54632,2.39928 32.40072,2.89608 C33.25512,3.38808 33.54792,4.47768 33.05592,5.32968 L31.07352,8.76168 C30.74232,9.33528 30.14232,9.65448 29.52552,9.65448" id="Fill-3" fill="#4793FE" opacity="0"/>
  <path d="M35.33328,15.45648 C34.71408,15.45648 34.11648,15.13728 33.78528,14.56608 C33.29328,13.71168 33.58608,12.62208 34.43808,12.13008 L37.87248,10.14768 C38.72688,9.65328 39.81648,9.95088 40.30608,10.80048 C40.79808,11.65488 40.50528,12.74448 39.65568,13.23648 L36.22128,15.21648 C35.94048,15.37968 35.63568,15.45648 35.33328,15.45648" id="Fill-5" fill="#4793FE" opacity="0.1"/>
  <path d="M41.41752,23.38416 L37.45512,23.38416 C36.46872,23.38416 35.67192,22.58496 35.67192,21.60096 C35.67192,20.61696 36.46872,19.81776 37.45512,19.81776 L41.41752,19.81776 C42.40152,19.81776 43.20072,20.61696 43.20072,21.60096 C43.20072,22.58496 42.40152,23.38416 41.41752,23.38416" id="Fill-7" fill="#4793FE" opacity="0.2"/>
  <path d="M38.75976,33.29352 C38.45976,33.29352 38.15256,33.21672 37.87176,33.05352 L34.43736,31.07112 C33.58776,30.57912 33.29496,29.48712 33.78696,28.63512 C34.27896,27.78552 35.36616,27.48792 36.22056,27.98232 L39.65496,29.96472 C40.50696,30.45672 40.79976,31.54872 40.30776,32.40072 C39.97896,32.97192 39.37896,33.29352 38.75976,33.29352" id="Fill-9" fill="#4793FE" opacity="0.3"/>
  <path d="M31.51296,40.54512 C30.89376,40.54512 30.29616,40.22352 29.96496,39.65472 L27.98256,36.22032 C27.49056,35.37072 27.78336,34.27872 28.63536,33.78672 C29.48976,33.29232 30.58176,33.58992 31.07136,34.43712 L33.05616,37.87152 C33.54816,38.72112 33.25536,39.81312 32.40096,40.30512 C32.12256,40.47072 31.81536,40.54512 31.51296,40.54512" id="Fill-11" fill="#4793FE" opacity="0.4"/>
  <path d="M21.6012,43.20048 C20.6172,43.20048 19.818,42.40128 19.818,41.41728 L19.818,37.45248 C19.818,36.46848 20.6172,35.66928 21.6012,35.66928 C22.5852,35.66928 23.3844,36.46848 23.3844,37.45248 L23.3844,41.41728 C23.3844,42.40128 22.5852,43.20048 21.6012,43.20048" id="Fill-13" fill="#4793FE" opacity="0.5"/>
  <path d="M11.69184,40.54512 C11.38944,40.54512 11.08224,40.47072 10.80144,40.30512 C9.94704,39.81312 9.65664,38.72112 10.14864,37.87152 L12.13104,34.43712 C12.62064,33.58752 13.71024,33.28992 14.56704,33.78672 C15.41904,34.27872 15.71184,35.37072 15.21744,36.22032 L13.23744,39.65472 C12.90864,40.22352 12.30864,40.54512 11.69184,40.54512" id="Fill-15" fill="#4793FE" opacity="0.6"/>
  <path d="M4.44144,33.29352 C3.82464,33.29352 3.22704,32.97192 2.89584,32.40072 C2.40384,31.54872 2.69424,30.45672 3.54864,29.96472 L6.98064,27.98232 C7.83024,27.49032 8.92224,27.78312 9.41664,28.63512 C9.90864,29.48712 9.61824,30.57912 8.76384,31.07112 L5.33184,33.05352 C5.05104,33.21672 4.74384,33.29352 4.44144,33.29352" id="Fill-17" fill="#4793FE" opacity="0.7"/>
  <path d="M5.748,23.38416 L1.7856,23.38416 C0.7992,23.38416 0,22.58496 0,21.60096 C0,20.61696 0.7992,19.81776 1.7856,19.81776 L5.748,19.81776 C6.732,19.81776 7.5312,20.61696 7.5312,21.60096 C7.5312,22.58496 6.732,23.38416 5.748,23.38416" id="Fill-19" fill="#4793FE" opacity="0.8"/>
  <path d="M7.87032,15.45648 C7.56792,15.45648 7.26072,15.37968 6.97992,15.21648 L3.54792,13.23648 C2.69352,12.74448 2.40312,11.65488 2.89512,10.80048 C3.38712,9.94848 4.47912,9.65568 5.33112,10.14768 L8.76312,12.13008 C9.61752,12.62208 9.90792,13.71168 9.41592,14.56608 C9.08712,15.13728 8.48712,15.45648 7.87032,15.45648" id="Fill-21" fill="#4793FE" opacity="0.9"/>
  <path d="M13.67592,9.65448 C13.05912,9.65448 12.45912,9.33528 12.13032,8.76168 L10.14792,5.32968 C9.65592,4.47768 9.94872,3.38808 10.80072,2.89608 C11.65272,2.39928 12.74472,2.69208 13.23672,3.54648 L15.21912,6.97848 C15.71112,7.83288 15.42072,8.92248 14.56632,9.41448 C14.28552,9.57768 13.97832,9.65448 13.67592,9.65448" id="Fill-23" fill="#4793FE"/>
`

export const VLoading = {
  start: (opt = { target: document.body, text: '努力加载中...' }) => {
    const { target, text } = opt
    const options = {
      target,
      lock: true,
      fullscreen: true,
      text,
      spinner: svg,
      svgViewBox: "-8 -8 56 56" // svg的viewbox修改 基础 0 0 48 48
    }
    return ElLoading.service(options)
  },
  close: (instance) => {
    if (instance) instance.close()
  }
}
/* https://element-plus.gitee.io/zh-CN/component/message.html#%E5%88%86%E7%BB%84%E6%B6%88%E6%81%AF%E5%90%88%E5%B9%B6 */
export const VMessage = ElMessage

export default {
  VLoading,
  VMessage
}
<template>
  <el-input-number v-model="data.value" :min="data.min" :max="data.max" controls-position="right" @change="handleChange" />
</template>

<script setup>
import { reactive, watch } from "vue";

const props = defineProps({
  modelValue: {
    type: [String, Number],
    default: 0
  },
  min: {
    type: [String, Number],
    default: 0
  },
  max: {
    type: [String, Number],
    default: 0
  }
})

const data = reactive({
  value: 0,
  min: 0,
  max: 0
})

const emit = defineEmits(['update:modelValue', 'change'])

watch(() => props, (val) => {
  const { modelValue, min, max } = val
  data.value = Number(modelValue)
  data.min = Number(min)
  data.max = Number(max)
}, { deep: true, immediate: true })

function handleChange(val) {
  emit('update:modelValue', val)
  emit('change', val)
}

</script>

<style scoped>

</style>
<template>
  <ul v-if="list.metrics.length > 0">
    <li v-for="(metric, index) in list.metrics" :key="metric.id" class="flex space-x-4">
      <span>{{ list.prefix || '' }}</span>
      <div>
        <p><span>{{ metric.value }}</span>{{ list.suffix || '' }}</p>
        <div class="flex items-center">
          <span
            v-if="metric.files.length > 0"
            class="cursor-pointer text-primary mr-2 truncate"
            @click="downloadFile(metric.files[0].id)"
          >{{ metric.files[0].filename }}</span>
          <el-popover
            v-if="metric.files.length > 1"
            v-model:visible="showMoreArr[index]"
            placement="bottom"
            width="404px"
            popper-class="v-shadow"
            trigger="hover"
          >
            <template #reference>
              <div class="cursor-pointer transition-all" :class="{ 'rotate-180': showMoreArr[index] }">
                <vastio-icon name="arrow-down" color="#798097" :size="12"></vastio-icon>
              </div>
            </template>
            <ul class="space-y-3 px-3 py-2">
              <li v-for="item in metric.files" :key="item.id" class="text-primary cursor-pointer" @click="downloadFile(item.id)">
                {{ item.filename }}
                <div class="mt-3 h-px w-full bg-base-300"></div>
              </li>
            </ul>
          </el-popover>
        </div>
      </div>
    </li>
  </ul>
</template>

<script setup>
import { reactive, ref, watch } from "vue";
import { downloadReportFile } from "@/api/report";

const props = defineProps({
  data: {
    type: Object,
    required: true
  }
})

const list = reactive({ prefix: '', suffix: '', metrics: [] })
const showMoreArr = ref([])

watch(() => props.data, () => {
  const { prefix, suffix, ratingMetrics } = props.data
  list.prefix = prefix
  list.suffix = suffix
  const metrics = ratingMetrics
    .map(({ id, value, ratingMetricFiles }) => ({
      id,
      value,
      files: ratingMetricFiles?.map((file) => ({ id: file.id, filename: file.filename })) || []
    }))
  list.metrics = metrics
  showMoreArr.value = new Array(metrics.length).fill(false)
}, { immediate: true, deep: true })

// function renderResult(result, method) {
//   if (method === 'option') return JSON.parse(result).join('-')
//   return result
// }

/* 下载文件 */
function downloadFile(fileId) {
  if (fileId) window.open(downloadReportFile(fileId))
}
</script>

<style scoped>

</style>
<!--
 * @Author: Qian Xiaolei
 * @Date: 2022-10-12 11:19:05
 * @LastEditTime: 2022-10-12 11:19:10
 * @LastEditors: Qian Xiaolei
 * @Description: 图标封装 支持 iconfont 图标及 src 路径图片
-->
<template>
  <template v-if="isImg">
    <img :src="req" alt="picture" :style="{ width: size+'px', height: size+'px' }" />
  </template>
  <template v-else>
    <i class="iconfont" :class="iconClass" :style="{ fontSize: size+'px', color: color }"></i>
  </template>
</template>

<script setup>
import { watch, ref } from "vue";

const props = defineProps({
  name: {
    type: String,
    default: "hint"
  },
  size: {
    type: Number,
    default: 20
  },
  color: {
    type: String,
    default: '#FFFFFF'
  }
});
/* 单独设置的图片路径映射 */
const SVG_MAP = {
  logo: 'logo.png', // 图标
  hint: 'hint.svg',
  icon1: 'icon1.png',
  icon2: 'icon2.png',
  icon3: 'icon3.png',
  icon4: 'icon4.png',
  icon5: 'icon5.png',
};
const iconClass = ref("");
const req = ref();
const isImg = ref(false)
watch(props, () => {
  if (SVG_MAP[props.name]) {
    // 图片存储路径
    req.value = new URL(`../../assets/images/${SVG_MAP[props.name]}`, import.meta.url)
    isImg.value = true
  } else {
    iconClass.value = `icon-${props.name}`
    isImg.value = false
  }
}, { immediate: true, deep: true })

</script>
<template>
  <div v-if="list && list.length > 0" class="flex">
    <div class="mr-4 flex items-center space-x-3">
      <span>{{ list[0]?.modifiedDate }}</span>
      <div class="h-2 w-2 rounded-full bg-primary"></div>
      <span class="text-right w-[38px]">{{ list[0]?.score.toFixed(2) }}</span>
      <span class="text-right w-[48px]">{{ list[0]?.modifiedUserName || '修改人' }}</span>
    </div>
    <el-popover
      v-if="list.length > 1"
      v-model:visible="showMore"
      placement="bottom"
      width="320px"
      popper-class="v-shadow"
      trigger="hover"
    >
      <template #reference>
        <div class="cursor-pointer transition-all flex items-center" :class="{ 'rotate-180': showMore }">
          <vastio-icon name="arrow-down" color="#798097" :size="12"></vastio-icon>
        </div>
      </template>
      <ul class="auto-overflow-y space-y-4 px-3 py-2 max-h-[126px]">
        <li v-for="(record, index) in list" :key="record.id" class="flex items-center space-x-3">
          <span class="w-[138px]">{{ record?.modifiedDate }}</span>
          <div
            class="relative h-2 w-2 rounded-full border border-primary"
            :class="{ 'bg-primary': index === 0 }"
          >
            <div
              v-show="index !== 0"
              class="absolute bottom-2 h-6 w-0 border border-dashed border-primary"
              style="left: calc(50% - 1px)"
            ></div>
          </div>
          <span class="text-right w-[38px]">{{ record?.score.toFixed(2) }}</span>
          <span class="text-right w-[48px]">{{ record?.modifiedUserName || '修改人' }}</span>
        </li>
      </ul>
    </el-popover>
  </div>
</template>

<script setup>
import { ref } from "vue";

defineProps({
  list: {
    type: Object,
    required: true,
  }
})

const showMore = ref(false)
</script>

<style scoped>

</style>
<template>
  <vastio-icon name="a-shouqizhankai" color="#4794FE" :size="12" class="rotate-180"></vastio-icon>
</template>

<script setup>

</script>

<style scoped>

</style>
<template>
  <div class="top-hint">
    <vastio-icon class="mr-2" name="hint" :size="14" color="#7A8097"></vastio-icon>
    <slot></slot>
  </div>
</template>

<script setup>
</script>

<style scoped>
.top-hint {
  --blue: #4793FE;
  display: flex;
  align-items: center;
  border-radius: 4px;
  border: 1px solid var(--blue);
  color: var(--blue);
  font-size: 14px;
  padding: 0 24px;
  min-height: 40px;
  background: #EEF4FE;
}
</style>
<!--
 * @Author: Qian Xiaolei
 * @Date: 2022-10-11 16:45:29
 * @LastEditTime: 2022-10-11 16:45:35
 * @LastEditors: Qian Xiaolei
 * @Description: button封装 可选属性 small 和 outline
-->
<template>
  <div :class="btnStyle">
    <slot></slot>
  </div>
</template>

<script setup>
import { computed } from "vue";

const props = defineProps({
  type: {
    type: String,
    default: ''
  },
  outline: {
    type: Boolean,
    default: false
  },
  small: {
    type: Boolean,
    default: false
  }
})

const btnStyle = computed(() => {
  const { type, outline, small } = props
  const btnType = type === '' ? '' : `btn-${type} `
  const btnOutline = outline ? `btn-outline ` : ''
  const btnSize = small ? `btn-sm ` : ''
  return `btn ${btnType}${btnOutline}${btnSize}`
})
</script>

<style scoped>
.btn-outline:hover {
  @apply bg-base-200 text-base-400;
}
</style>
<template>
  <div :id="chartId" :style="{height:height,width:width}"></div>
</template>

<script setup>
import { useMethod, useDebounce } from "@/hooks";
import { onBeforeUnmount, onMounted } from "vue";
import * as echarts from "echarts";

defineProps({
  width: {
    type: String,
    default: 'auto'
  },
  height: {
    type: String,
    default: ''
  }
})

let chart = null
const chartId = useMethod().randomString()
const debounceChartResize = useDebounce().debounce(chartResize, 300);

onMounted(() => {
  chart = echarts.init(document.getElementById(chartId))
  window.addEventListener("resize", debounceChartResize);
  chartResize()
})

onBeforeUnmount(() => {
  window.removeEventListener("resize", debounceChartResize);
  chart.dispose()
})

function updateOption(option) {
  chart.setOption(option, { notMerge: true })
  chartResize()
}

function chartResize() {
  if (chart) chart.resize();
}

defineExpose({ updateOption })

</script>

<style scoped>

</style>
<template>
  <div v-show="modelValue" class="popover">
    <div class="popover-bg" @click="hide"></div>
    <div class="popover-container" :style="{ width, minWidth: '500px', maxWidth: '80vw' }" @click.stop>
      <div v-if="title" class="popover-header">
        <div class="popover-title">{{ title }}</div>
        <vastio-icon name="guanbi" class="popover-close" @click="hide"></vastio-icon>
      </div>
      <div class="popover-content">
        <slot></slot>
      </div>
    </div>
  </div>
</template>
<script setup>
import VastioIcon from "./VastioIcon.vue";

defineProps({
  title: {
    type: String,
    default: ''
  },
  modelValue: {
    type: Boolean,
    default: false
  },
  width: {
    type: String,
    default: 'auto'
  }
})
const emit = defineEmits(["update:modelValue"])
const hide = () => {
  emit("update:modelValue", false);
}
</script>
<style scoped>
.popover {
  position: fixed;
  z-index: 999;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.popover-bg {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -9;
  animation: popoverBgFadeIn ease-in 0.2s forwards;
}

.popover-container {
  color: #2D344A;
  background: #FFF;
  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
  border-radius: 4px;
  animation: popoverMainFadeIn ease-in 0.3s forwards;
}

.popover-header {
  color: #FFF;
  font-size: 16px;
  font-weight: 600;
  background-color: rgba(63, 74, 107, 1);
  display: flex;
  align-items: center;
  padding: 0 28px;
}

.popover-title {
  height: 40px;
  line-height: 40px;
  flex: 1;
}

.popover-close {
  cursor: pointer;
  font-weight: normal;
}

.popover-content {
  /*background-color: rgba(220, 220, 220, 0.2);*/
  background-color: #FFFFFF;
  max-height: 80vh;
  overflow-y: auto;
}

@keyframes popoverBgFadeIn {
  from {
    background-color: transparent;
    backdrop-filter: blur(0px);
    opacity: 0;
  }
  to {
    background-color: rgba(220, 220, 220, 0.2);
    backdrop-filter: blur(4px);
    opacity: 1;
  }
}

@keyframes popoverMainFadeIn {
  from {
    transform: translate3d(0, -20px, 0);
    opacity: 0;
  }
  to {
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
</style>
<!--
 * @Author: Qian Xiaolei
 * @Date: 2022-10-11 16:45:29
 * @LastEditTime: 2022-10-11 16:45:35
 * @LastEditors: Qian Xiaolei
 * @Description: tabs封装 可选属性small和gapless
-->
<template>
  <div class="vastio-tab" :class="tabStyle">
    <div
      v-for="item in list"
      :key="item.value"
      class="tab-item"
      :class="{'active': modelValue === item.value}"
      @click="changeActive(item.value)"
    >
      {{ item.label }}
    </div>
  </div>
</template>

<script setup>
import { computed } from "vue";

const props = defineProps({
  modelValue: {
    type: [String, Number],
    default: '',
  },
  list: {
    type: Array,
    default: () => [
      { value: '', label: '' }
    ],
    required: true
  },
  gapless: {
    type: Boolean,
    default: false
  },
  small: {
    type: Boolean,
    default: false
  }
})

const tabStyle = computed(() => {
  const { gapless, small } = props
  const typeClass = gapless ? `tab__gapless` : ''
  const sizeClass = small ? `tab__small` : ''
  return `${sizeClass} ${typeClass}`
})

const emit = defineEmits(['update:modelValue', "change"])

function changeActive(val) {
  emit('update:modelValue', val)
  emit("change", val);
}
</script>

<style lang="less" scoped>
.vastio-tab {
  @apply flex text-sm text-base-400 select-none;
}

.tab-item {
  word-break: keep-all;
  @apply box-border h-10 leading-10 px-6 bg-line-200 rounded-t mr-2 cursor-pointer box-border;
  &:hover {
    @apply opacity-90;
  }
  &:last-child {
    @apply mr-0;
  }
}

.active {
  @apply bg-primary text-base-100;
}

.tab__small {
  & .tab-item{
  @apply h-7 leading-7 px-4 border border-base-400 bg-base-100 rounded-sm;
    &.active {
    @apply bg-base-400 text-base-100;
    }
  }
}

.tab__gapless {
  .tab-item{
    @apply mr-0 rounded-none;
    &:first-child {
      @apply rounded-l;
    }
    &:last-child {
      @apply rounded-r;
    }
    &:not(:last-child) {
      @apply border-r-0;
    }
  }
  &.tab__small .tab-item {
    &:first-child {
      @apply rounded-l-sm;
    }
    &:last-child {
      @apply rounded-r-sm;
    }
  }
}

</style>
<template>
  <div class="btn min-w-[135px] rounded border border-neutral bg-base-100 px-6 text-sm text-base-400 hover:bg-base-100">
    <slot></slot>
  </div>
</template>

<script setup>

</script>

<style scoped>

</style>
<template>
  <div class="title">
    <slot></slot>
  </div>
</template>

<style scoped>
.title {
  @apply pl-4 relative font-semibold text-lg;
}

.title::before {
  content: '';
  @apply bg-primary w-1 h-5 absolute left-0 top-1/2 -translate-y-1/2;
}
</style>

<script setup>
import { ref } from "vue";

import TopNav from "./nav/TopNav.vue";
import SideNav from "./nav/SideNav.vue";

defineProps({
  title: {
    type: String,
    default: "系统名称",
  },
  user: {
    type: [String, Object],
    default: "用户名称",
  },
  menus: {
    type: Array,
    default: () => [],
  },
});

const sideMenus = ref([]);
const showMore = ref(false);

const emit = defineEmits(["logout"]);
function logout() {
  emit("logout");
}

function changeNav(data) {
  sideMenus.value = data?.children || [];
}
</script>

<template>
  <div class="relative h-screen w-screen">
    <div class="relative z-10 flex h-16 select-none items-center bg-base-content text-base-100">
      <img class="h-16 w-16" src="@/assets/images/logo.png" alt="" />
      <span class="text-2xl font-semibold">{{ title }}</span>
      <div class="ml-[80px] flex-1">
        <top-nav :menus="menus" @change="changeNav"></top-nav>
      </div>
      <div class="flex h-16 cursor-pointer items-center px-7 text-lg hover:bg-base-400" @click="showMore = !showMore">
        <i class="iconfont icon-user text-2xl leading-none"></i>
        <span class="mx-3">{{ user }}</span>
        <i class="iconfont icon-arrow-down transition-all" :class="{ 'rotate-180': showMore }"></i>
      </div>
      <div :class="`${showMore ? 'opacity-100 translate-y-full' : '-translate-y-full opacity-0 '}`" class="absolute right-2 -bottom-px -z-10 text-center text-lg transition-all">
        <div class="w-32 cursor-pointer bg-base-400 py-2" @click="logout">登出</div>
        <!-- <div class="bg-base-400 py-2 w-32 cursor-pointer mt-px">其他菜单</div> -->
      </div>
    </div>
    <div class="absolute inset-0 top-16 flex bg-base-100 text-base-content">
      <div v-if="sideMenus.length" class="auto-overflow relative z-10 w-64 p-5">
        <side-nav :menus="sideMenus"></side-nav>
      </div>
      <div class="auto-overflow flex-1 bg-base-200">
        <router-view></router-view>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, useSlots } from "vue";

defineProps({
  modelValue: {
    type: String,
    default: "",
  },
  label: {
    type: String,
    default: "",
  },
  labelWidth: {
    type: String,
    default: "auto",
  },
  placeholder: {
    type: String,
    default: "",
  },
  required: {
    type: Boolean,
  },
  prefixIcon: {
    type: String,
    default: "",
  },
  suffixIcon: {
    type: String,
    default: "",
  },
  disabled: {
    type: Boolean,
  },
  // 传入error则显示报错，具体表单验证在外部自定义，组件本身不做表单验证
  error: {
    type: Error,
    default: () => {},
  },
});

const emit = defineEmits(["update:modelValue", "input"]);
function handleChange(event) {
  emit("update:modelValue", event.target.value);
  emit("input", event.target.value);
}

const focusState = ref("");
</script>

<template>
  <div class="mb-5 flex items-center text-sm last:mb-0">
    <div class="flex items-center justify-end" :style="`width:${labelWidth};`">
      <div v-if="required" class="text-error">*</div>
      <div v-if="label" class="mr-3 ml-1 truncate text-base-content" :title="label">{{ label }}</div>
    </div>
    <div class="input-wrapper relative" :class="[focusState, { disabled: disabled }, { 'is-error': error && error.message }]">
      <div v-if="prefixIcon || !!useSlots().prefix" class="mr-5">
        <slot v-if="!!useSlots().prefix" name="prefix"></slot>
        <i v-else-if="prefixIcon" class="iconfont" :class="prefixIcon"></i>
      </div>
      <input type="text" :value="modelValue" :placeholder="placeholder" :disabled="disabled" @input="handleChange" @focusin="focusState = 'is-focus'" @focusout="focusState = ''" />
      <div v-if="suffixIcon || !!useSlots().suffix" class="ml-5">
        <slot v-if="!!useSlots().suffix" name="suffix"> </slot>
        <i v-else-if="suffixIcon" class="iconfont" :class="suffixIcon"></i>
      </div>
      <div v-if="error && error.message" class="absolute top-full">{{ error.message }}</div>
    </div>
  </div>
</template>

<style lang="less" scoped>
.input-wrapper {
  @apply text-base-400 bg-base-100 px-5 rounded border border-neutral focus:border-primary flex items-center flex-1;

  &.is-focus {
    @apply border-primary;
  }

  &.disabled {
    @apply bg-base-200 border-line-300 text-line-300;
    input {
      @apply bg-base-200;
    }
  }

  &.is-error {
    @apply border-error text-error;
  }

  input {
    @apply h-10 flex-1 outline-none;
  }
}
</style>

<script setup>
import { ref } from "vue";

defineProps({
  title: {
    type: String,
    default: "",
  },
});
const isShow = ref(false);

function show() {
  isShow.value = true;
}
function hide() {
  isShow.value = false;
}
defineExpose({
  show,
  hide,
});
</script>

<template>
  <div v-show="isShow" class="fixed inset-0 z-[9999] flex items-center justify-center bg-base-200/25 backdrop-blur" @click="hide">
    <div class="overflow-hidden rounded bg-base-100 shadow-card" @click.stop>
      <div v-if="title" class="flex h-12 min-w-[500px] items-center bg-base-400 px-7 text-base-100">
        <div class="flex-1 font-semibold">{{ title }}</div>
        <div class="cursor-pointer" @click="hide">
          <i class="iconfont icon-close"></i>
        </div>
      </div>
      <div class="p-7">
        <slot></slot>
      </div>
    </div>
  </div>
</template>
<template>
  <div
    :style="{ 'background-image': `url(${mainBg})`}"
    style="padding-top: 6vh"
    class="text-white w-screen h-screen bg-cover bg-top flex-row"
  >
    <!-- 顶部统计 90px -->
    <ul class="py-6 flex items-center justify-center gap-16">
      <li v-for="item in systemTotal" :key="item.label" class="flex items-center gap-3 font-semibold">
        <span class="bg-dp-blue w-2 h-2 rounded-full"></span>
        <span>{{ item.label }}：</span>
        <span class="text-dp-blue" style="font-size: 28px;">{{ item.value }}</span>
      </li>
    </ul>

    <!-- 主体内容 -->
    <main class="grid grid-cols-2 gap-9 p-5 pt-0" style="height: calc( 94vh - 90px );">
      <div class="gird-cols-2 auto-overflow-y grid grid-rows-3 gap-9">
        <custom-module
          title="机构排名"
          class="col-span-1 row-span-2"
        >
          <org-ranking :filter="mainFilter" />
        </custom-module>
        <custom-module title="人员排名" class="col-span-1 row-span-2">
          <member-ranking :data="personRankingData" />
        </custom-module>
        <custom-module title="指标评分" class="col-span-2 row-span-1">
          <indicator-score :filter="mainFilter" />
        </custom-module>
      </div>
      <div class="auto-overflow-y grid grid-rows-2 gap-9">
        <custom-module class="row-span-1" title="排名前三人员得分">
          <top-three-member-score :data="personRankingData" :filter="mainFilter" />
        </custom-module>
        <div>
          <div class="auto-overflow-y grid grid-cols-2 gap-9 h-full">
            <custom-module title="排名上升人员">
              <ranking-up-member :data="personRankingData" />
            </custom-module>
            <custom-module title="奖惩记录" class="auto-overflow-y">
              <reword-and-punish-record :filter="mainFilter" />
            </custom-module>
          </div>
        </div>
      </div>
    </main>
  </div>
</template>

<script setup>
import { onBeforeMount, ref } from "vue";
import systemStore from "@/store";
import dayjs from "dayjs";
import { getAssertsPic } from '@/lib/utils.js'
import { getMemberMonthlyRanking } from "@/api/stats";
import { getMeasures } from "@/api/report";
import OrgRanking from './components/OrgRanking.vue'
import MemberRanking from './components/MemberRanking.vue'
import RankingUpMember from './components/RankingUpMember.vue'
import RewordAndPunishRecord from './components/RewordAndPunishRecord.vue'
import IndicatorScore from './components/IndicatorScore.vue'
import TopThreeMemberScore from './components/TopThreeMemberScore.vue'

const { groupList, memberCount } = systemStore()
const mainFilter = ref()
// 背景图
const mainBg = getAssertsPic('mainBg.png')

// 数据总计
const systemTotal = ref()

const personRankingData = ref()
onBeforeMount(() => {
  getTotalData()
  const defaultMonth = dayjs().add(-1, 'month').format('YYYY-MM')
  mainFilter.value = { type: 'month', month: defaultMonth, orgId: '' }
  getMemberMonthlyRanking(mainFilter.value)
    .then(({ results }) => {
      personRankingData.value = results
    })
})

function getTotalData() {
  getMeasures()
    .then(({ results }) => {
      const metricsCount = results.filter(({ type }) => type === 'item').length
      systemTotal.value = [
        { label: '机构总数', value: groupList.length },
        { label: '人员总数', value: memberCount },
        { label: '指标总数', value: metricsCount },
      ]
    })
}
</script>

<route lang="yaml">
meta: #自定义属性入口
  name: '首页' #导航栏名称 *注意不要写道meta外面，route本身有name，当name重复时会有问题*
  sort: 9 #同级导航排序  *从小到大、从左往右、从上到下分布*
  layout: 'Empty' #页面布局 *vastio/laouts/*.vue*
  icon: 'icon-home' #导航栏图标 *目前只支持iconfont，可根据实际优化调整*
</route>
<template>
  <div class="v-shadow bg-base-100">
    <slot></slot>
  </div>
</template>

<script setup>

</script>

<style scoped>

</style>

<script setup>
import { ref } from "vue";

import TopNav from "./nav/TopNav.vue";

defineProps({
  title: {
    type: String,
    default: "系统名称",
  },
  user: {
    type: [String, Object],
    default: "用户名称",
  },
  menus: {
    type: Array,
    default: () => [],
  },
});

const showMore = ref(false);

const emit = defineEmits(["logout"]);
function logout() {
  emit("logout");
}
</script>

<template>
  <div class="relative h-screen w-screen">
    <div class="relative z-10 flex h-16 select-none items-center bg-base-content text-base-100">
      <img class="h-16 w-16" src="@/assets/images/logo.png" />
      <span class="text-2xl font-semibold">{{ title }}</span>
      <div class="flex-1">
        <top-nav :menus="menus"></top-nav>
      </div>
      <div class="flex h-16 cursor-pointer items-center px-7 text-lg hover:bg-base-400" @click="showMore = !showMore">
        <i class="iconfont icon-user text-2xl leading-none"></i>
        <span class="mx-3">{{ user }}</span>
        <i class="iconfont icon-arrow-down transition-all" :class="{ 'rotate-180': showMore }"></i>
      </div>
      <div :class="`${showMore ? 'opacity-100 translate-y-full' : '-translate-y-full opacity-0 '}`" class="absolute right-2 -bottom-px -z-10 text-center text-lg transition-all">
        <div class="w-32 cursor-pointer bg-base-400 py-2" @click="logout">登出</div>
        <!-- <div class="bg-base-400 py-2 w-32 cursor-pointer mt-px">其他菜单</div> -->
      </div>
    </div>
    <div class="absolute inset-0 top-16 flex bg-base-100 text-base-content">
      <div class="auto-overflow flex-1 bg-base-200">
        <router-view></router-view>
      </div>
    </div>
  </div>
</template>

<template>
  <router-view></router-view>
</template>
<template>
  <div class="px-[156px] space-y-7 py-7">
    <top-filter ref="mainFilterRef" :role="user.role" @search="search"></top-filter>
    <div class="grid grid-cols-2 gap-7">
      <div class="col-span-1">
        <vastio-title class="mb-3">得分最高前十人员</vastio-title>
        <vastio-card class="h-[630px] p-6">
          <div class="grid-filter mb-6 flex items-center space-x-6 text-sm">
            <div class="flex items-center">
              <span class="mr-3 w-[70px]">指标类目：</span>
              <span class="flex-1">
                <el-select v-model="topTenFilter.category" @change="updateTopTen(mainFilter)">
                  <el-option v-for="item in measureOption.category.slice(1)" :key="item.value" :label="item.label" :value="item.value" />
                </el-select>
              </span>
            </div>
          </div>
          <vastio-chart ref="topTenChartRef" height="518px"></vastio-chart>
        </vastio-card>
      </div>
      <div class="col-span-1">
        <vastio-title class="mb-3">得分最低十个指标</vastio-title>
        <vastio-card class="v-table h-[630px] p-6">
          <div v-if="lastTen.tab.list.length > 1" class="auto-overflow-x mb-3 w-full pb-1">
            <vastio-tab v-model="lastTen.tab.active" :list="lastTen.tab.list" small gapless @change="updateLastTen(mainFilter)"></vastio-tab>
          </div>
          <el-table :data="lastTen.table" max-height="540px" stripe cell-class-name="custom-height">
            <el-table-column prop="topTitle" label="指标类目" show-overflow-tooltip />
            <el-table-column prop="title" label="指标名称" show-overflow-tooltip />
            <el-table-column prop="score" label="得分" align="right" width="100">
              <template #default="{ row }">
                {{ row.score }}分
              </template>
            </el-table-column>
            <el-table-column prop="maxScore" label="支队最高分" align="right" width="120">
              <template #default="{ row }">
                {{ row.maxScore }}分
              </template>
            </el-table-column>
            <el-table-column prop="avgScore" label="支队均分" align="right" width="120">
              <template #default="{ row }">
                {{ row.avgScore }}分
              </template>
            </el-table-column>
          </el-table>
        </vastio-card>
      </div>
    </div>
    <div>
      <vastio-title class="mb-3">各指标得分详情</vastio-title>
      <vastio-card class="v-table p-6">
        <div class="grid-filter mb-6 flex items-center space-x-6 text-sm">
          <div class="flex items-center">
            <span class="mr-3 w-[70px]">指标类目：</span>
            <span class="w-60">
              <el-select v-model="eachMeasure.filter.category">
                <el-option v-for="item in eachMeasure.topTitleList" :key="item.value" :label="item.label" :value="item.value" />
              </el-select>
            </span>
          </div>
          <div class="flex items-center">
            <span class="mr-3 w-[70px]">所属大队：</span>
            <span class="w-60">
              <el-select v-model="eachMeasure.filter.group" @change="updateMetricScoreDetail(mainFilter)">
                <el-option v-for="item in measureOption.group" :key="item.value" :label="item.label" :value="item.value" />
              </el-select>
            </span>
          </div>
        </div>
        <el-table id="eachMeasureTable" :data="filteredTable" max-height="490px" border :span-method="objectSpanMethod">
          <el-table-column prop="topTitle" label="指标类目" min-width="160px" />
          <el-table-column prop="label" label="指标名称" show-overflow-tooltip min-width="200px">
            <template #default="{ row }">
              <span :class="{ 'text-secondary': row.type === 'path' }">{{ row.label }}</span>
            </template>
          </el-table-column>
          <template v-for="(memberScore, index) in eachMeasureMemberScores" :key="index">
            <el-table-column :label="memberScore.name" align="center">
              <template #default="{ $index }">
                {{ memberScore.scores[$index] !== null ? memberScore.scores[$index] + '分' : '' }}
              </template>
            </el-table-column>
          </template>
          <!--          <el-table-column label="得分详情" header-align="center">-->
          <!--            <template #default="{ row }">-->
          <!--              <ul v-if="row.type === 'item'" class="flex justify-evenly items-center">-->
          <!--                <template v-for="(item, index) in row.scores" :key="index">-->
          <!--                  <li>{{ item.name }}：{{ item.score }}分</li>-->
          <!--                  <li v-if="index + 1 !== row.scores.length" class="h-12 border-l border-line-100"> </li>-->
          <!--                </template>-->
          <!--              </ul>-->
          <!--            </template>-->
          <!--          </el-table-column>-->
        </el-table>
      </vastio-card>
    </div>
  </div>
</template>

<script setup>
import systemStore from "@/store";
import { computed, onMounted, reactive, ref } from "vue";
import { getMeasures } from "@/api/report";
import { getAllMeasuresByOrgId, getMeasuresByOrgId, getScoreByCode } from "@/api/stats";
import { handleNum } from "@/lib/public";

const { user, groupList } = systemStore()
const mainFilterRef = ref(null)
const mainFilter = ref({})
/* 得分前10过滤 */
const measureOption = reactive({
  category: [],
  group: []
})
const topTenFilter = reactive({ category: '' })
/* 得分最高前十人员图表 */
const topTenChartRef = ref(null)
/* 得分最低10个指标 */
const lastTen = reactive({
  tab: { active: '', list: [] },
  table: []
})
/* 各指标得分详情 */
const eachMeasure = reactive({
  filter: { category: '', group: '' },
  topTitleList: [],
  fullTable: [],
})
const filteredTable = computed(() => {
  const category = eachMeasure.filter.category
  if (!category) return eachMeasure.fullTable
  return eachMeasure.fullTable.filter(({ topTitle }) => topTitle === category)
})
const eachMeasureMemberScores = computed(() => {
  const tableData = filteredTable.value
  const list = tableData
    .find(({ type }) => type === 'item')
    ?.scores
    ?.map(({ name }, index) => ({ name, scores: [], index }))
  if (Array.isArray(list) && list.length > 0) {
    for (let i = 0; i < tableData.length; i++) {
      const cur = tableData[i]
      if (cur.type === 'path') {
        for (let j = 0; j < list.length; j++) {
          list[j].scores.push(null)
        }
      } else if (cur.type === 'item') {
        for (let j = 0; j < list.length; j++) {
          const score = cur.scores
            ?.find(({ name }) => name === list[j].name)
            ?.score
          if (typeof score === "number") {
            list[j].scores.push(score)
          } else {
            list[j].scores.push(null);
          }
        }
      }
    }
    return list
  }
  return []
})

onMounted(async () => {
  if (['branch', 'manage'].includes(user.role)) {
    measureOption.group = groupList
    lastTen.tab.list = groupList.map(({ label, value }) => ({ label: label.replace('大队', ''), value }))
  } else if (user.role === 'group') {
    const filteredGroupList = groupList.filter((item) => item.value === user.dwid)
    measureOption.group = filteredGroupList
    lastTen.tab.list = filteredGroupList.map(({ label, value }) => ({ label: label.replace('大队', ''), value }))
  }
  eachMeasure.filter.group = measureOption.group[0].value
  lastTen.tab.active = lastTen.tab.list[0].value
  /* 指标 */
  const { results: measures } = await getMeasures()
  measureOption.category = [{ label: "所有类目", value: "" }, ...measures.filter((item) => !item.parent)
    .map((item) => ({ label: item.title, value: item.code }))]
  topTenFilter.category = measureOption.category[1].value
  /* 默认渲染 */
  mainFilterRef.value.updateFilter()
})

/* 更新数据 */
function search(params) {
  mainFilter.value = params
  /* 更新得分前10 */
  updateTopTen(params)
  /* 更新得分最低十个指标 */
  updateLastTen(params)
  /* 更新各指标得分详情 */
  updateMetricScoreDetail(params)
}
/* 更新得分前10 */
function updateTopTen(params) {
  const apiParams = { type: params.type, month: params[params.type], code: topTenFilter.category }
  getScoreByCode(apiParams)
    .then(({ results }) => {
      const branchAvg = (results.reduce((acc, cur) => acc + cur.score, 0) / results.length).toFixed(2); // 均分
      const sortedRes = results.sort((a, b) => b.score - a.score).slice(0, 10)
      const yData = sortedRes.map(({ name, orgName }) => `${name}（${orgName}）`)
      const seriedData1 = sortedRes.map(({ score }) => handleNum(score))
      const maxLength = (Math.max(...yData.map((name) => name.length)) + 2) * 16 + 12
      const option = {
        tooltip: { trigger: 'axis', axisPointer: { type: 'shadow' } },
        color: ["#73C0DE"],
        grid: { left: maxLength, right: '36', bottom: '0', top: '30' },
        xAxis: {
          type: 'value',
          position: 'top',
          axisLabel: { margin: 16, color: '#798097' },
          splitLine: { lineStyle: { type: "dashed" } },
          min: Math.min(branchAvg, ...seriedData1, 0)
        },
        yAxis: {
          inverse: true,
          type: 'category',
          data: yData,
          axisLine: { show: false },
          axisTick: { show: false },
          axisLabel: {
            align: 'right',
            formatter(value, index) {
              return `{order|${index + 1}}{data|${value}}`
            },
            rich: {
              data: { color: '#2C3349', fontSize: '14px', width: maxLength - 30 },
              order: {
                width: 20,
                height: 20,
                align: 'center',
                color: '#798098',
                backgroundColor: '#F8F8F8',
                fontSize: '14px',
                borderRadius: 20,
              }
            }
          },
        },
        series: [
          {
            type: 'bar',
            data: seriedData1,
            barMinWidth: 20,
            barMaxWidth: 24,
            label: { show: true, position: 'outside', formatter(value) { return value.data; } },
            markLine: {
              data: [{ name: "支队均分", xAxis: branchAvg }],
              symbol: 'none',
              label: { position: "start", color: "#4793FE", fontSize: 14, distance: 2, formatter: `支队均分：${branchAvg}分` },
              lineStyle: { color: "#4793FE" }
            }
          }
        ],
        graphic: {
          elements: [
            { type: 'text', left: 0, top: 8, style: { text: '排名', fontSize: 14 } }
          ]
        }
      }
      topTenChartRef.value.updateOption(option)
    })
}
/* 更新得分最低10个指标 */
function updateLastTen(params) {
  const apiParams = { type: params.type, month: params[params.type], orgId: lastTen.tab.active }
  getMeasuresByOrgId(apiParams)
    .then(({ results }) => {
      const filterResults = results.filter(({ type }) => type === 'item')
        .sort((a, b) => b.score - a.score)
        .slice(-10)
      lastTen.table = filterResults
        .map(({ topTitle, title, maxScore, avgScore, score }) => ({
          topTitle,
          title,
          maxScore: handleNum(maxScore),
          avgScore: handleNum(avgScore),
          score: handleNum(score) }
        ))
    })
}
/* 更新各指标得分详情 */
function updateMetricScoreDetail(params) {
  const apiParams = { ...params, orgId: eachMeasure.filter.group }
  if (apiParams.type === 'year') apiParams.month = apiParams.year
  getAllMeasuresByOrgId(apiParams)
    .then(({ results }) => {
      let pathList = []
      const tempTable = results
        .filter(({ type }) => type === 'item')
        .map(({ topTitle, title, personMonthItems, personYearItems, code }) => {
          const scores = (mainFilter.value.type === 'month' ? personMonthItems : personYearItems)
            .map(({ personName, score }) => ({ name: personName, score: handleNum(score) }))
          pathList.push(renderPathLabel(results, code))
          return { topTitle, type: 'item', path: renderPathLabel(results, code), label: title, scores }
        })
      eachMeasure.topTitleList = [
        { label: '所有类目', value: '' },
        ...Array.from(new Set(tempTable.map(({ topTitle }) => topTitle)))
          .map((title) => ({ label: title, value: title }))
      ]
      eachMeasure.fullTable = tempTable
      pathList = [...new Set(pathList)].reverse()
      pathList.forEach((pathLabel) => {
        if (pathLabel) {
          const pathIndex = tempTable.findIndex(({ path }) => path === pathLabel)
          tempTable.splice(pathIndex, 0, { topTitle: tempTable[pathIndex].topTitle, type: 'path', label: pathLabel })
        }
      })
    })
}
/* 表格方法 */
function flitterData(arr) {
  const spanOneArr = []
  let concatOne = 0
  arr.forEach((item, index) => {
    if (index === 0) {
      spanOneArr.push(1);
    } else if (item.topTitle === arr[index - 1].topTitle) { // 第一列需合并相同内容的判断条件
      spanOneArr[concatOne] += 1;
      spanOneArr.push(0);
    } else {
      spanOneArr.push(1);
      concatOne = index;
    }
  });
  return {
    one: spanOneArr,
  }
}
/* 根据末级code生成完整路径 */
function renderPathLabel(list, code) {
  const pathLabel = []
  for (let i = -2; i > -code.length; i -= 2) {
    const parentCode = code.slice(0, i)
    const parentLabel = list.find((item) => item.code === parentCode).title
    pathLabel.unshift(parentLabel)
  }
  return pathLabel.join('-')
}
// eslint-disable-next-line consistent-return
function objectSpanMethod({ rowIndex, columnIndex }) {
  if (columnIndex === 0) {
    // this.tableData  修改
    const rowVal = (flitterData(filteredTable.value).one)[rowIndex];
    const colVal = rowVal > 0 ? 1 : 0;
    return { rowspan: rowVal, colspan: colVal };
  }
}
</script>

<style lang="less" scoped>
::v-deep(.v-table .el-table .cell) {
  display: block;
  line-height: 48px;
}
::v-deep(.vastio-tab) {
  @apply w-full;
  .tab-item {
    @apply flex-1 text-center;
  }
}
</style>
<template>
  <div class="px-[156px] space-y-7 py-7">
    <div class="flex items-center justify-between">
      <div class="text-xl font-semibold">指标管理</div>
      <!--      <vastio-button outline>-->
      <!--        <vastio-icon name="upload" color="#404A6B" :size="18" class="mr-3"></vastio-icon>-->
      <!--        <span>导出Excel</span>-->
      <!--      </vastio-button>-->
    </div>
    <div class="flex space-x-7">
      <vastio-card class="w-[380px]">
        <div class="flex items-center justify-between px-6 py-5">
          <span class="font-semibold">指标类目</span>
          <vastio-button type="primary" @click="showPopover('新增类目', 'root-add')">新增类目</vastio-button>
        </div>
        <div class="h-px w-full bg-line-200"></div>
        <div class="auto-overflow-y my-5 px-6" style="height: calc( 100vh - 310px );">
          <el-tree
            ref="treeRef"
            class="auto-overflow custom-tree-icon"
            :data="treeData"
            default-expand-all
            @current-change="handleTreeCurrentChange"
          >
            <template #default="{ node, data }">
              <div
                class="min-h-[40px] flex items-center justify-between pr-2 w-full"
              >
                <span class="max-w-[190px] cursor-default" style="white-space: break-spaces">{{ data.label }}</span>
                <div class="tree-options space-x-2 min-w-[52px] hidden">
                  <vastio-icon title="新增下级" name="xinzengxiaji" :size="18" color="#4794FE" @click="showPopover('新增子类目', 'node-add', node)"></vastio-icon>
                  <vastio-icon title="编辑" name="bianji" :size="18" color="#4794FE" @click="showPopover('编辑类目', 'node-edit', node)"></vastio-icon>
                  <vastio-icon title="删除" name="shanchu" :size="18" color="#EE6666" @click="showPopover('删除类目', 'node-del', node)"></vastio-icon>
                </div>
              </div>
            </template>
          </el-tree>
        </div>
      </vastio-card>
      <vastio-card class="flex-1 px-6 py-5">
        <div class="mb-5 flex items-center justify-between">
          <p>
            <span class="mr-3 font-semibold">指标</span>
            <span class="text-sm text-neutral">
              当前共有{{ measureCount.total }}个指标，
              其中系统抽取{{ measureCount.auto }}个，
              人工填报{{ measureCount.manual }}个
            </span>
          </p>
          <vastio-button type="primary" @click="beforeAddMeasure">新增指标</vastio-button>
        </div>
        <!-- 列表 -->
        <div>
          <div class="flex h-12 w-full items-center border-b border-line-200 bg-line-100 font-semibold">
            <span class="flex-1 px-6">指标名称</span>
            <span class="w-[140px] text-center">数据来源</span>
            <span class="w-[140px] text-center">考核周期</span>
            <span class="w-[140px] text-center">评分方式</span>
            <span class="w-[140px] text-center">操作</span>
          </div>
          <ul class="auto-overflow-y -mr-2 relative" style="height: calc( 100vh - 337px )">
            <li v-for="detail in measureList" :id="ID_PRE + detail.parentCode" :key="detail.parentCode">
              <p class="border-b border-line-200 py-3.5 pl-6 text-xs text-secondary">{{ detail.pathLabel }}</p>
              <ul>
                <li v-for="item in detail.list" :key="item.id" class="flex border-b border-line-200 py-3.5 text-sm">
                  <div class="flex flex-1 items-center">
                    <div class="w-6" title="系统抽取">
                      <vastio-icon v-if="item.source === 'collect'" name="xitongshouqu" :size="16" color="#4794FE"></vastio-icon>
                    </div>
                    <span>{{ item.label }}</span>
                  </div>
                  <div class="w-[140px] text-center">{{ item.source === 'input' ? '个人填报' : '系统抽取' }}</div>
                  <div class="w-[140px] text-center">{{ item.scoreCycle === 'month' ? '月' : '年' }}</div>
                  <div class="w-[140px] text-center">
                    <span class="mr-2">{{ getDataByMethodType(item.scoreMethod)?.label }}</span>
                    <el-tooltip placement="right" effect="light">
                      <vastio-icon name="pingfenxize" :size="16" color="#4794FE"></vastio-icon>
                      <template #content>
                        <div class="max-w-[198px]">
                          评分规则<br />{{ item.description }}
                        </div>
                      </template>
                    </el-tooltip>
                  </div>
                  <div class="w-[140px] text-center text-primary text-sm space-x-6">
                    <span v-if="item.scoreMethod !== 'compare'" class="cursor-pointer" @click="handleMeasure('edit', item)">编辑</span>
                    <span class="cursor-pointer" @click="handleMeasure('del', item)">删除</span>
                    <!--<span class="cursor-pointer" @click="handleMeasure('move', item)">移动</span>-->
                  </div>
                </li>
              </ul>
            </li>
          </ul>
        </div>
      </vastio-card>
    </div>
  </div>
  <vastio-popover v-model="popover.show" :title="popover.title">
    <template v-if="['root-add', 'node-add', 'node-edit'].includes(popover.type)">
      <div class="py-6 px-7 space-y-6">
        <div class="grid-filter flex items-center">
          <span class="w-[100px] text-sm">类目名称：</span>
          <el-input v-model.trim="popover.categoryName" placeholder="请输入"></el-input>
        </div>
        <div class="space-x-16 text-center">
          <vastio-button type="primary" @click="updateGroupMeasure">确定</vastio-button>
          <vastio-button type="secondary" @click="hidePopover">取消</vastio-button>
        </div>
      </div>
    </template>
    <template v-else-if="['measure-edit', 'measure-add'].includes(popover.type)">
      <measure-detail ref="measureDetailRef" :data="currentMeasure.data"></measure-detail>
      <div class="space-x-16 text-center pb-4">
        <vastio-button type="primary" @click="submitMeasureForm">确定</vastio-button>
        <vastio-button type="secondary" @click="hidePopover">取消</vastio-button>
      </div>
    </template>
    <template v-else-if="['measure-del', 'node-del'].includes(popover.type)">
      <div class="py-6 px-7 space-y-6">
        <p class="text-center max-w-[362px] mx-auto">确认删除指标”<span>{{ currentMeasure.data.title }}</span>“？</p>
        <div class="space-x-16 text-center pb-4">
          <vastio-button type="primary" @click="sureDelMeasure">确定</vastio-button>
          <vastio-button type="secondary" @click="hidePopover">取消</vastio-button>
        </div>
      </div>
    </template>
  </vastio-popover>
</template>

<script setup>
import { onBeforeMount, reactive, ref } from "vue";
import { addMeasure, delMeasure, editMeasure, getMeasures } from "@/api/report";
import { VMessage } from '@/lib/useTips'
import systemStore from "@/store";
import MeasureDetail from './components/MeasureDetail.vue'

const { getDataByMethodType } = systemStore()
const ID_PRE = 'item_'
/* 类目数据 */
const treeRef = ref()
const treeData = ref([])
/* 指标数据 */
const measureList = ref([])
const measureCount = reactive({ total: 0, auto: 0, manual: 0 })

const measureDetailRef = ref(null)
const currentMeasure = reactive({
  data: { title: '', source: 'input', multiple: 0, scoreMethod: 'direct', note: '', scoreMax: null, scoreRule: '', description: '' }
})

const popover = reactive({
  show: false,
  title: '',
  type: '',
  categoryName: '', // 新增、编辑类目名
  currentNode: '', // 当前树节点
  measureForm: {}
})

onBeforeMount(getReportData)
/*
* type
* root-add新增根类目 node-add新增子类目 node-edit编辑类目
* measure-add新增指标 measure-edit编辑指标
* node-del, measure-del 删除类目/指标
*  */
function showPopover(title, type, node) {
  popover.show = true
  popover.title = title
  popover.type = type
  popover.categoryName = ''
  popover.currentNode = node
  if (popover.type === 'node-edit' && node) {
    popover.categoryName = node.data.title
  }
  if (popover.type === 'measure-add') {
    currentMeasure.data = { title: '', source: 'input', multiple: 0, scoreMethod: 'direct', note: '', scoreMax: null, scoreRule: '' }
  }
  if (['measure-del', 'node-del'].includes(popover.type)) {
    currentMeasure.data = node.data
  }
}

function hidePopover() { popover.show = false }

async function getReportData() {
  const { results } = (await getMeasures({ month: '2022-10' }))
  const tempTreeData = []
  const tempMeasureList = [] // [{ pathLabel: '', parentCode: '', list: [] }]
  let tempTotal = 0
  let tempAuto = 0
  let tempManual = 0
  for (let i = 0; i < results.length; i++) {
    const cur = results[i]
    if (!cur.parent) {
      tempTreeData.push({ ...cur, label: cur.title, value: cur.id })
    } else if (cur.type === 'item') {
      tempTotal += 1
      if (cur.source === 'input') { tempManual += 1 } else { tempAuto += 1 }
      const parentCode = cur.code.slice(0, -2)
      let findI = -1
      findI = tempMeasureList.findIndex((curItem) => curItem.parentCode === parentCode)
      if (findI < 0) {
        const pathLabel = renderPathLabel(results, cur.code)
        findI = tempMeasureList.push({ pathLabel, parentCode, list: [] }) - 1
      }
      if (cur?.ratingMetrics?.length <= 0) cur.ratingMetrics.push({ value: '', ratingMetricFiles: [] })
      tempMeasureList[findI].list.push({ ...cur, label: cur.title, value: cur.id })
    } else {
      findNode(tempTreeData, cur)
    }
  }
  treeData.value = tempTreeData
  measureList.value = tempMeasureList
  measureCount.total = tempTotal
  measureCount.manual = tempManual
  measureCount.auto = tempAuto

  /* 根据末级code生成完整路径 */
  function renderPathLabel(list, code) {
    // 0,-2 0,-4 0,-6 ...
    const pathLabel = []
    for (let i = -2; i > -code.length; i -= 2) {
      const parentCode = code.slice(0, i)
      const parentLabel = list.find((item) => item.code === parentCode).title
      pathLabel.unshift(parentLabel)
    }
    return pathLabel.join('-')
  }
  /* 寻找子节点 */
  function findNode(tree, node) {
    try {
      for (let i = 0; i < tree.length; i++) {
        const parent = tree[i]
        // code模糊匹配  id精准匹配
        if (node.code.startsWith(parent.code)) {
          if (Number(node.parent) === parent.id) {
            parent.children = parent.children || []
            parent.children.push({ ...node, label: node.title, value: node.id })
          } else if (parent.children) {
            findNode(parent.children, node)
          }
        }
      }
    } catch (err) {
      console.log(err);
    }
  }
}
/* 更新类目 （根类目新增，非根类目新增，类目修改） */
function updateGroupMeasure() {
  const title = popover.categoryName
  if (!title) {
    VMessage.warning('请输入类目名称')
    return
  }
  const FIXED_PARAMS = { aggMethod: "avg", disabled: 0, work: 0, type: "group", scoreCycle: "month", target: "person", source: 'input', multiple: 0 }
  if (popover.type === 'root-add') {
    const apiParams = { ...FIXED_PARAMS, title, level: 1 }
    addMeasure(apiParams)
      .then(() => {
        afterUpdateMeasures()
        VMessage.success('新增成功')
      })
  }
  if (popover.type === 'node-add') {
    const parentData = popover.currentNode.data
    const apiParams = { ...FIXED_PARAMS, title, level: parentData.level + 1, parent: parentData.id }
    addMeasure(apiParams)
      .then(() => {
        afterUpdateMeasures()
        VMessage.success('新增成功')
      })
  }
  if (popover.type === 'node-edit') {
    const currentNode = popover.currentNode.data
    const apiParams = { ...FIXED_PARAMS, title, level: currentNode.level, id: currentNode.id }
    editMeasure(apiParams)
      .then(() => {
        afterUpdateMeasures()
        VMessage.success('编辑成功')
      })
  }
}

/* 新增指标前验证 */
function beforeAddMeasure() {
  const currentNode = treeRef.value.getCurrentNode()
  if (!currentNode) {
    VMessage.warning('请在左侧选中指标类目后，再新增指标')
    return
  }
  showPopover('新增指标', 'measure-add')
}

/* 提交指标表单 */
function submitMeasureForm() {
  const FIXED_PARAMS = { aggMethod: "avg", disabled: 0, work: 0, type: "item", scoreCycle: "month", target: "person", }
  const parentData = treeRef.value.getCurrentNode()
  measureDetailRef.value.getFormData().then((data) => {
    if (popover.type === 'measure-add') {
      const apiParams = { level: parentData.level + 1, parent: parentData.id, ...FIXED_PARAMS, ...data }
      addMeasure(apiParams)
        .then(() => {
          afterUpdateMeasures()
          VMessage.success('新增成功')
        })
    } else if (popover.type === 'measure-edit') {
      const apiParams = { ...data }
      editMeasure(apiParams)
        .then(() => {
          afterUpdateMeasures()
          VMessage.success('编辑成功')
        })
    }
  })
}

/* 确定删除指标 */
function sureDelMeasure() {
  const measureId = currentMeasure.data.id
  delMeasure(measureId)
    .then(() => {
      afterUpdateMeasures()
      VMessage.success('删除成功')
    })
}

/* 类目、指标变动回调 */
function afterUpdateMeasures(callback) {
  getReportData()
  hidePopover()
  if (callback) callback()
}

/* 处理指标操作 */
function handleMeasure(option, data) {
  currentMeasure.data = data
  if (option === 'edit') {
    showPopover('编辑指标', 'measure-edit')
  }
  if (option === 'del') {
    showPopover('删除指标', 'measure-del')
  }
}
/* 锚点定位 */
function handleTreeCurrentChange(curItem) {
  const code = curItem.code
  const localDom = document.querySelector(`#${ID_PRE}${code}`)
  if (localDom) {
    localDom.parentNode.scrollTo({ top: localDom.offsetTop, behavior: 'smooth' })
  }
}
</script>

<style lang="less" scoped>
::v-deep(.is-leaf) {
  .iconfont {
    @apply hidden;
  }
}
/* 树样式修改 */
::v-deep(.el-tree-node) {
  @apply mt-2;
}
::v-deep(.el-tree-node__label) {
  @apply flex-1;
}
::v-deep(.el-tree-node__content) {
  @apply h-auto cursor-auto;
  &:hover .tree-options {
    @apply block;
    &>i {
      @apply cursor-pointer;
      &:hover {
      @apply inline-block scale-125 transition;
      }
    }
  }
}
::v-deep(.is-current) > .el-tree-node__content {
  @apply bg-base-300 text-primary;
& .node-number {
    @apply text-primary-content bg-primary;
  }
}
::v-deep(.el-form-item) {
  &:last-child {
    @apply mb-0;
  }
}
</style>
<template>
  <div class="px-[156px] py-7">
    <div class="flex items-center justify-between">
      <div class="text-xl font-semibold">
        {{ currentInfo.date.year }}年{{ Number(currentInfo.date.month) }}月工作绩效考评
        - {{ currentInfo.group.label }}
      </div>
      <vastio-button type="primary" @click="goBack">返回</vastio-button>
    </div>
    <div class="mt-7">
      <vastio-tab v-model="tab.value" :list="tab.list" @change="updateTable"></vastio-tab>
      <vastio-card id="personDetail" class="w-full py-4 px-6" style="height: calc( 100vh - 228px );">
        <div class="flex items-center justify-between">
          <div>
            <span class="mr-3 font-semibold">得分：</span>
            <span class="text-xl">{{ activeMemberData.score }}</span>
          </div>
          <div class="space-x-6">
            <vastio-button type="primary" @click="submitModify">提交</vastio-button>
            <vastio-button outline @click="toMemberEidt">修改填报内容</vastio-button>
          </div>
        </div>
        <div class="v-table mt-4">
          <el-table
            :data="activeMemberData.tableData"
            row-key="id"
            default-expand-all
            max-height="calc( 100vh - 324px )"
            class="custom-tree-icon"
          >
            <el-table-column prop="label" label="考核指标">
              <template #default="{ row }">
                <span class="mr-2" :class="{ 'font-semibold': !row.parent }">{{ row.label }}</span>
                <el-tooltip v-if="row.type === 'item' && row.description" placement="right" effect="light">
                  <vastio-icon name="pingfenxize" :size="16" color="#4794FE"></vastio-icon>
                  <template #content>
                    <div class="max-w-[198px]">
                      评分规则<br />{{ row.description }}
                    </div>
                  </template>
                </el-tooltip>
              </template>
            </el-table-column>
            <el-table-column prop="content" label="内容">
              <template #default="{ row }">
                <report-contents :data="row"></report-contents>
              </template>
            </el-table-column>
            <el-table-column label="得分" align="center" width="200px">
              <template #default="{ row }">
                <div v-if="row.personMonthItem" class="flex w-[120px]">
                  <el-input-number v-model="row.personMonthItem.score" size="small" :precision="2" :controls="false" @change="modifyScore(row)" />
                </div>
              </template>
            </el-table-column>
            <el-table-column label="最终得分" width="350">
              <template #default="{ row }">
                <score-record :list="row.updateLogs"></score-record>
              </template>
            </el-table-column>
          </el-table>
        </div>
      </vastio-card>
    </div>
  </div>
</template>

<script setup>
import { useRouter, useRoute } from "vue-router";
import { onBeforeMount, reactive } from "vue";
import { getMeasureResById, getMonthRatingList, modifyCommittedRating } from "@/api/report";
import systemStore from "@/store";
import { VLoading, VMessage } from "@/lib/useTips";

const router = useRouter()
const route = useRoute()
const { groupList } = systemStore()

const currentInfo = reactive({
  group: { label: '', value: '' },
  date: { year: '', month: '' }
})
/* 人员切换tab */
const tab = reactive({ value: '', list: [] })

const activeMemberData = reactive({
  score: 0,
  tableData: []
})

onBeforeMount(async () => {
  const loading = VLoading.start()
  const params = {
    orgCode: route.query.groupId,
    month: route.query.date
  }
  currentInfo.group = groupList.find(({ value }) => value === params.orgCode)
  const [year, month] = params.month.split('-')
  currentInfo.date = { year, month }
  const { results } = (await getMonthRatingList(params))
  tab.list = results.map((item) => ({ value: item.personId, label: item.personName }))
  tab.value = tab.list[0]?.value
  VLoading.close(loading)
  if (tab.value) await updateTable(tab.value)
})
/* 更新树形表格数据 */
async function updateTable(activeId) {
  const loading = VLoading.start({ target: document.querySelector("#personDetail") })
  const res = (await getMeasureResById(activeId, { month: route.query.date })).results[0]
  activeMemberData.score = res.score
  const results = res.measureResults
  const tempTreeData = []
  for (let i = 0; i < results.length; i++) {
    const cur = results[i]
    if (!cur.parent) {
      tempTreeData.push({ ...cur, label: cur.title, value: cur.id })
    } else {
      findNode(tempTreeData, cur)
    }
  }
  activeMemberData.tableData = tempTreeData
  VLoading.close(loading)
  /* 寻找子节点 */
  function findNode(tree, node) {
    try {
      for (let i = 0; i < tree.length; i++) {
        const parent = tree[i]
        // code模糊匹配  id精准匹配
        if (node.code.startsWith(parent.code)) {
          if (Number(node.parent) === parent.id) {
            parent.children = parent.children || []
            const obj = { ...node, label: node.title, value: node.id }
            if (obj.type === "item") obj.isModified = false
            parent.children.push(obj)
          } else if (parent.children) {
            findNode(parent.children, node)
          }
        }
      }
    } catch (err) {
      console.log(err);
    }
  }
}
/* 更改已修改状态 */
function modifyScore(row) {
  row.isModified = true
}
/* 提交修改 */
function submitModify() {
  if (!tab.value) return;
  const tableData = JSON.parse(JSON.stringify(activeMemberData.tableData))
  const paramsList = []
  handleParamsList(tableData)
  const modifiedData = paramsList.filter((item) => item.isModified)
    .map((item) => ({ measureId: item.id, score: item.personMonthItem?.score }))
  if (modifiedData.length <= 0) {
    VMessage.warning('未检测到修改纪录，无需提交')
    return
  }
  const loading = VLoading.start({ text: "提交中..." })
  const apiParams = {
    month: route.query.date,
    personId: tab.value,
    params: modifiedData
  }
  modifyCommittedRating(apiParams)
    .then(() => {
      VMessage.success('提交成功')
    })
    .finally(() => {
      updateTable(tab.value)
      VLoading.close(loading)
    })

  function handleParamsList(data) {
    for (let i = 0; i < data.length; i++) {
      const cur = data[i]
      if (cur.type === 'item') {
        paramsList.push(cur)
      } else if (cur.children?.length > 0) {
        handleParamsList(cur.children)
      }
    }
  }
}
/* 跳转'修改填报内容'页面 */
function toMemberEidt() {
  const memberId = tab.value
  if (memberId) router.push({ path: '/reportsubmit/report', query: { memberId, month: route.query.date, option: 'edit' } })
}
/* 返回 */
function goBack() {
  router.back()
}
</script>

<style lang="less" scoped>
::v-deep(.v-table .el-table .cell) {
  padding: 0 24px;
  min-height: 48px;
  white-space: normal;
  word-break: keep-all;
  display: flex;
  align-items: center;
}

.cell-icon-outer:hover .icon-arrow-down {
  @apply rotate-180;
}
</style>
<template>
  <div class="p-7 space-y-7">
    <header class="grid-filter flex space-x-6">
      <el-form :model="filterForm" label-width="82px" class="flex space-x-6">
        <el-form-item label="操作内容">
          <el-input v-model="filterForm.name" clearable placeholder="请输入"></el-input>
        </el-form-item>
        <el-form-item label="操作时间">
          <el-date-picker
            v-model="filterForm.rangeTime"
            type="daterange"
            range-separator="至"
            start-placeholder="开始时间"
            end-placeholder="结束时间"
          />
        </el-form-item>
        <vastio-button type="primary" @click="renderApiParams(filterForm)">搜索</vastio-button>
      </el-form>
    </header>
    <main class="v-shadow v-table bg-base-100 p-5">
      <el-table :data="tableData" stripe style="width: 100%">
        <el-table-column prop="userName" label="操作人" />
        <el-table-column prop="orgName" label="所属单位">
          <template #default="{ row }">
            {{ row.orgName || groupList.find(({ value }) => value === row.orgId)?.label }}
          </template>
        </el-table-column>
        <el-table-column prop="actionType" label="操作类型">
          <template #default="{ row }">{{ action.TYPE[row.actionType] }}</template>
        </el-table-column>
        <el-table-column prop="moduleName" label="操作内容" />
        <el-table-column prop="actionTime" label="操作时间" />
        <el-table-column prop="actionResult" label="操作结果">
          <template #default="{ row }">{{ action.RESULT[row.actionResult] }}</template>
        </el-table-column>
        <el-table-column prop="remoteAddress" label="登录IP" />
      </el-table>
      <div class="flex justify-end">
        <el-pagination
          v-model:current-page="pager.currentPage"
          v-model:page-size="pager.pageSize"
          small
          layout="prev, pager, next"
          :total="pager.total"
        />
      </div>
    </main>
  </div>
</template>

<script setup>
import { reactive, ref, watch } from "vue";
import { getLog } from "@/api/system";
import systemStore from "@/store";

const { groupList } = systemStore()
const action = {
  RESULT: { 1: "成功", 0: "失败" },
  TYPE: { 0: "登录", 1: "查询", 2: "新增", 3: "修改", 4: "删除", 5: "登出" },
  LOG: [{ label: '用户操作', value: 'trace' }, { label: '系统抽取', value: 'collect' }]
};
const filterForm = reactive({ rangeTime: [], logType: 'trace' });
const pager = reactive({ total: 0, currentPage: 1, pageSize: 15 });
const apiParams = reactive({ page: 1, size: 15, start: null, end: null, name: '' })
const tableData = ref([]);

watch(() => pager.currentPage, (pageVal) => {
  apiParams.page = pageVal
});

search(apiParams)
function renderApiParams({ name, rangeTime }) {
  apiParams.name = name
  if (Array.isArray(rangeTime)) {
    const [start, end] = rangeTime
    apiParams.start = start?.getTime()
    apiParams.end = end?.getTime()
  }
  search(apiParams)
}

function search(params) {
  getLog('trace', params)
    .then(({ results, total }) => {
      tableData.value = results
      pager.total = total
    })
}
</script>

<style scoped>

</style>
<template>
  <div class="px-[156px] flex flex-col space-y-7 p-7">
    <div v-if="!isOther" class="grid-filter flex items-center">
      <span class="mr-3 w-[126px] text-sm">工作绩效考核时段：</span>
      <span class="w-60">
        <el-date-picker
          v-model="filter.month"
          type="month"
          placeholder="请选择月份"
          format="YYYY年MM月"
          value-format="YYYY-MM"
          :clearable="false"
          :disabled-date="submitDisabledDate"
          @change="renderReport"
        />
      </span>
    </div>
    <!--    <div v-else>-->
    <!--      <span class="font-semibold">{{ memberInfo.name }}</span>-->
    <!--      <span>{{ memberInfo.measureDate }}</span>-->
    <!--    </div>-->

    <vastio-card
      id="reportDetail"
      class="flex flex-1 p-6"
      :style="{maxHeight: user.role === 'member' ? 'calc( 100vh - 188px )' : 'calc( 100vh - 120px )' }"
    >
      <report-nav-tree v-model:checkedId="currentItemId" :tree-data="treeData" class="mr-6 w-80"></report-nav-tree>
      <component
        :is="COMPONENTS_MAP[optionType]"
        v-model:list="itemList"
        :month="filter.month"
        :member-id="memberInfo.id"
        :scroll-id="currentItemId"
        :commit-data="commitData"
        class="flex-1"
        @on-submit="renderReport"
        @on-save-all="renderReport"
      ></component>
    </vastio-card>
  </div>
</template>

<script setup>
import { onBeforeMount, reactive, ref } from "vue";
import { useRoute } from 'vue-router'
import systemStore from "@/store";
import dayjs from "dayjs";
import { getMeasureResById } from "@/api/report";
import { VLoading } from "@/lib/useTips";
import ReportNavTree from './components/ReportNavTree.vue'
import ReportShow from "./components/ReportShow.vue";
import ReportEdit from "./components/ReportEdit.vue";

const route = useRoute()
const { user, submitDisabledDate } = systemStore()
const isOther = ref(false)
// 人员ID
const memberInfo = reactive({ id: '', name: '', measureDate: '' })
// 操作类型 edit || show
const optionType = ref('show')
/* 过滤器 */
const filter = reactive({ month: '' })
/* 滚动定位ID */
const currentItemId = ref('')
/* 组件展示MAP 编辑|查看 */
const COMPONENTS_MAP = { edit: ReportEdit, show: ReportShow }
/* 树数据 */
const treeData = ref([])
/* 数据列表 */
const itemList = ref([])
/* 提交状态 */
const commitData = ref({})
onBeforeMount(() => {
  const { memberId, month } = route.query
  if (memberId) {
    isOther.value = true;
    memberInfo.id = memberId
    memberInfo.measureDate = month
    filter.month = month
  } else {
    isOther.value = false;
    // 默认月份 传参 || 当前月份
    const defaultMonth = dayjs(new Date()).format('YYYY-MM')
    memberInfo.id = user.personId
    memberInfo.measureDate = defaultMonth
    filter.month = defaultMonth
  }
  renderReport()
})

/* 获取考核报告数据 */
async function renderReport() {
  const loading = VLoading.start({ target: document.querySelector('#reportDetail') })
  const params = { month: filter.month }
  // if (route.query.memberId) {
  const res = (await getMeasureResById(memberInfo.id, params)).results[0]
  // } else {
  //   res = (await getMeasureRes(params)).results[0]
  // }
  memberInfo.name = res.name
  commitData.value = res.lastCommit
  const results = res.measureResults
  optionType.value = res.state === 0 ? 'edit' : 'show'
  if (route.query.option) optionType.value = 'edit'

  const tempTreeData = []
  const tempItemList = [] // [{ pathLabel: '', parentCode: '', list: [] }]
  for (let i = 0; i < results.length; i++) {
    const cur = results[i]
    if (!cur.parent) {
      tempTreeData.push({ ...cur, label: cur.title, value: cur.id })
    } else if (cur.type === 'item') {
      if (!(optionType.value === 'edit' && cur.source === 'collect')) {
        const parentCode = cur.code.slice(0, -2)
        let findI = -1
        findI = tempItemList.findIndex((curItem) => curItem.parentCode === parentCode)
        if (findI < 0) {
          const pathLabel = renderPathLabel(results, cur.code)
          findI = tempItemList.push({ pathLabel, parentCode, list: [] }) - 1
        }
        if (cur.ratingMetrics.length <= 0) cur.ratingMetrics.push({ value: '', ratingMetricFiles: [] })
        tempItemList[findI].list.push({ ...cur, label: cur.title, value: cur.id })
      }
    } else {
      findNode(tempTreeData, cur)
    }
  }
  treeData.value = tempTreeData
  itemList.value = tempItemList

  VLoading.close(loading)

  /* 根据末级code生成完整路径 */
  function renderPathLabel(list, code) {
    // 0,-2 0,-4 0,-6 ...
    const pathLabel = []
    for (let i = -2; i > -code.length; i -= 2) {
      const parentCode = code.slice(0, i)
      const parentLabel = list.find((item) => item.code === parentCode).title
      pathLabel.unshift(parentLabel)
    }
    return pathLabel.join('-')
  }
  /* 寻找子节点 */
  function findNode(tree, node) {
    try {
      for (let i = 0; i < tree.length; i++) {
        const parent = tree[i]
        // code模糊匹配  id精准匹配
        if (node.code.startsWith(parent.code)) {
          if (Number(node.parent) === parent.id) {
            parent.children = parent.children || []
            parent.children.push({ ...node, label: node.title, value: node.id })
          } else if (parent.children) {
            findNode(parent.children, node)
          }
        }
      }
    } catch (err) {
      console.log(err);
    }
  }
}
</script>

<style lang="less" scoped>
::v-deep(.el-input__icon.icon-arrow-down) {
  &::before{
    content: '';
  }
}
</style>
<template>
  <div class="p-7 space-y-7">
    <header class="grid-filter flex space-x-6 justify-between">
      <el-form :model="filterForm" label-width="82px" class="flex space-x-6">
        <el-form-item label="考评对象">
          <el-input v-model="filterForm.name" clearable placeholder="请输入"></el-input>
        </el-form-item>
        <el-form-item label="所属机构">
          <el-select v-model="filterForm.orgId" clearable placeholder="请选择">
            <el-option v-for="group in groupList" :key="group.value" :label="group.label" :value="group.value" />
          </el-select>
        </el-form-item>
        <vastio-button type="primary" @click="initParams">搜索</vastio-button>
      </el-form>
      <vastio-button type="primary" @click="showPopover('add')">新增考核对象</vastio-button>
    </header>

    <main class="v-shadow v-table bg-base-100 p-5 space-y-6">
      <el-table :data="tableData" stripe style="width: 100%">
        <el-table-column prop="name" label="考评对象" />
        <el-table-column prop="orgName" label="所属单位" />
        <el-table-column prop="xfjdAcc" label="关联消监账号" />
        <el-table-column prop="userId" label="关联用户账号" />
        <el-table-column label="操作" header-align="center" align="center">
          <template #default="{ row }">
            <div class="text-primary space-x-4">
              <span class="cursor-pointer" @click="showPopover('edit', row)">编辑</span>
              <span v-show="row.active" class="cursor-pointer" @click="showPopover('stop', row)">停止考核</span>
              <span v-show="!row.active" class="cursor-pointer" @click="showPopover('start', row)">开启考核</span>
            </div>
          </template>
        </el-table-column>
      </el-table>
      <div class="flex justify-between items-center">
        <div class="text-sm text-neutral">
          <span>共 {{ Math.ceil(pager.total / pager.pageSize) }} 页，</span>
          <span>{{ pager.total }} 条</span>
        </div>
        <el-pagination
          v-model:current-page="pager.currentPage"
          v-model:page-size="pager.pageSize"
          small
          layout="jumper, prev, pager, next"
          :total="pager.total"
        />
      </div>
    </main>
  </div>
  <vastio-popover v-model="popover.show" :title="popover.title">
    <div class="space-y-6 p-6 px-[80px]">
      <template v-if="['edit','add'].includes(popover.type)">
        <el-form
          ref="popTableRef"
          :model="detailForm"
          label-width="130px"
          class="grid-filter space-y-4"
          :rules="popTableRules"
        >
          <el-form-item label="考核对象" prop="name">
            <el-input v-model="detailForm.name" clearable placeholder="请输入"></el-input>
          </el-form-item>
          <el-form-item label="所属机构" prop="orgId">
            <el-select v-model="detailForm.orgId" clearable placeholder="请选择">
              <el-option v-for="group of groupList" :key="group.value" :label="group.label" :value="group.value" />
            </el-select>
          </el-form-item>
          <el-form-item label="关联消监账号" prop="xfjdAcc">
            <el-select v-model="detailForm.xfjdAcc" clearable placeholder="请选择" filterable>
              <el-option v-for="xjzh of xjzhList" :key="xjzh.xfjdAcc" :label="xjzh.xfjdAcc" :value="xjzh.xfjdAcc" />
            </el-select>
          </el-form-item>
          <el-form-item label="关联用户账号" prop="userId">
            <el-select v-model="detailForm.userId" clearable placeholder="请选择" filterable>
              <el-option v-for="user of userList" :key="user.username" :label="user.username" :value="user.username" />
            </el-select>
          </el-form-item>
        </el-form>
      </template>
      <template v-else-if="popover.type === 'stop'">
        <p class="text-center">确定停止'{{ detailForm.name }}'考核?</p>
      </template>
      <template v-else-if="popover.type === 'start'">
        <p class="text-center">确定开启'{{ detailForm.name }}'考核?</p>
      </template>
      <div class="space-x-16 text-center">
        <vastio-button type="primary" @click="updateUser">保存</vastio-button>
        <vastio-button type="secondary" @click="hidePopover">取消</vastio-button>
      </div>
    </div>
  </vastio-popover>
</template>

<script setup>
import { onBeforeMount, reactive, ref, watch } from "vue";
import systemStore from "@/store";
import { systemMember, systemUser, systemXfjd } from "@/api/system";
import { VMessage } from "@/lib/useTips";

const { groupList } = systemStore()
const xjzhList = ref([])
const userList = ref([])
const filterForm = reactive({ name: null, orgId: null });
const tableData = ref([]);
const pager = reactive({ total: 0, currentPage: 1, pageSize: 10 });

const detailForm = ref({ name: '', orgId: '', xfjdAcc: '', userId: '' })
const popover = reactive({ show: false, title: '', type: '', data: {} })
const popTableRef = ref()
const popTableRules = ref({
  name: [{ required: true, message: '考核对象不可为空', trigger: 'blur' }],
  orgId: [{ required: true, message: '所属机构不可为空', trigger: 'blur' }],
  xfjdAcc: [{ required: true, message: '关联消监账号不可为空', trigger: 'blur' }],
  userId: [{ required: true, message: '关联用户账号不可为空', trigger: 'blur' }],
})

onBeforeMount(() => {
  Promise.all([
    systemUser.list({ size: 9999 }),
    systemXfjd.list({ size: 9999 })
  ]).then((res) => {
    userList.value = res[0].results
    xjzhList.value = res[1].results
    search()
  })
})
watch(() => pager.currentPage, () => {
  search();
});

function initParams() {
  if (pager.currentPage === 1) {
    search()
  } else {
    pager.currentPage = 1
  }
}

function search() {
  const params = {
    page: pager.currentPage,
    size: pager.pageSize,
    name: filterForm.name,
    orgId: filterForm.orgId,
  };
  systemMember.list(params)
    .then(({ results, total }) => {
      tableData.value = results
      pager.total = total
    })
}

function hidePopover() {
  popover.show = false
}

function showPopover(type, data = {}) {
  const TYPE_MAP = { add: '新增考核对象', edit: '编辑考核对象', stop: '停用考核对象', start: '开启考核对象' }
  popover.show = true
  popover.type = type
  popover.title = TYPE_MAP[type]
  detailForm.value = { ...data }
}
defineExpose({ showPopover })

function updateUser() {
  if (popover.type === 'edit') {
    popTableRef.value.validate((isValid) => {
      if (isValid) {
        systemMember.update(detailForm.value)
          .then(() => {
            VMessage.success('编辑成功')
            popover.show = false
            search()
          })
      }
    })
  }
  if (popover.type === 'add') {
    popTableRef.value.validate((isValid) => {
      if (isValid) {
        systemMember.create(detailForm.value)
          .then(() => {
            VMessage.success('新增成功')
            popover.show = false
            search()
          })
      }
    })
  }
  if (popover.type === 'stop') {
    systemMember.update({
      ...detailForm.value,
      active: 0
    })
      .then(() => {
        VMessage.success('停止考核成功')
        popover.show = false
        search()
      })
  }
  if (popover.type === 'start') {
    systemMember.update({
      ...detailForm.value,
      active: 1
    })
      .then(() => {
        VMessage.success('开启考核成功')
        popover.show = false
        search()
      })
  }
}
</script>

<style scoped>
::v-deep(.el-form-item--large) {
  @apply mb-0;
}
</style>
<template>
  <div class="px-[156px] space-y-9 py-7">
    <div class="text-xl font-semibold">审核列表</div>
    <div class="grid-filter flex items-center space-x-6 text-sm">
      <div class="flex items-center">
        <span class="mr-3 w-[70px]">所属大队：</span>
        <span class="w-60">
          <el-select v-model="filter.group">
            <el-option v-for="item in groupOption" :key="item.value" :label="item.label" :value="item.value" />
          </el-select>
        </span>
      </div>
      <div class="flex items-center">
        <span class="mr-3 w-[70px]">考核时间：</span>
        <span class="w-60">
          <el-date-picker
            v-model="filter.year"
            value-format="YYYY"
            type="year"
            placeholder="请选择年份"
            :clearable="false"
            :disabled-date="disabledDate"
          />
        </span>
      </div>
      <vastio-button type="primary" @click="updateList">查询</vastio-button>
    </div>
    <ul class="space-y-6">
      <li v-for="item in list" :key="item.label">
        <list-item-card :data="item">
          <template #options>
            <vastio-button type="primary" @click="toGroupDetail(item)">审核</vastio-button>
          </template>
        </list-item-card>
      </li>
    </ul>
  </div>
</template>

<script setup>
import { computed, onBeforeMount, reactive, ref } from "vue";
import { useRouter } from "vue-router";
import dayjs from "dayjs";
import systemStore from "@/store";
import statusStore from "@/store/status"
import { getRatingList } from "@/api/report";
import { storeToRefs } from "pinia";

const router = useRouter()
/* 大队列表 */
const { groupList, user, disabledDate } = systemStore()

const groupOption = computed(() => {
  const { role: userRole, dwid: userId } = user
  if (userRole === 'group') return groupList.filter((item) => item.value === userId)
  return groupList
})

/* 过滤器 */
const { auditFilter } = storeToRefs(statusStore());
const filter = reactive({ group: '', year: '' })
/* 数据 */
const list = ref([])

onBeforeMount(() => {
  // 默认过滤
  if (!auditFilter.value.group) auditFilter.value.group = groupOption.value[0].value
  if (!auditFilter.value.year) auditFilter.value.year = dayjs().format('YYYY')
  filter.group = auditFilter.value.group
  filter.year = auditFilter.value.year
  // 更新列表
  updateList()
})
/* 更新列表 */
function updateList() {
  auditFilter.value = { ...filter }
  const params = { orgCode: filter.group, year: filter.year }
  getRatingList(params)
    .then(({ results }) => {
      list.value = results.map((item) => {
        const { month, endTime, startTime } = item
        const [handledYear, handledMonth] = month.split('-')
        return Object.assign(item, {
          label: `${handledYear}年${Number(handledMonth)}月工作绩效考评`,
          startTime: startTime.split(' ')[0],
          endTime: endTime.split(' ')[0]
        })
      })
        .sort((a, b) => b.month.split('-')[1] - a.month.split('-')[1])
    })
}
/* 跳转大队审核页面 */
function toGroupDetail(cur) {
  const groupId = cur.orgCode
  const date = cur.month
  router.push({ path: '/reportsubmit/examinedetail', query: { groupId, date } })
}
</script>

<style scoped>

</style>
<template>
  <div class="p-7 space-y-7">
    <header class="grid-filter flex space-x-6 justify-between">
      <el-form :model="filterForm" label-width="82px" class="flex space-x-6">
        <el-form-item label="用户名称">
          <el-input v-model="filterForm.name" clearable placeholder="请输入"></el-input>
        </el-form-item>
        <el-form-item label="所属单位">
          <el-select v-model="filterForm.orgId" clearable placeholder="请选择">
            <el-option v-for="group in groupList" :key="group.value" :label="group.label" :value="group.value" />
          </el-select>
        </el-form-item>
        <vastio-button type="primary" @click="initParams">搜索</vastio-button>
      </el-form>
      <!--      <vastio-button type="primary" @click="addUser">新增</vastio-button>-->
    </header>

    <main class="v-shadow v-table bg-base-100 p-5 space-y-6">
      <el-table :data="tableData" stripe style="width: 100%">
        <el-table-column prop="name" label="用户名" />
        <el-table-column prop="username" label="账号" />
        <!--        <el-table-column prop="phone" label="手机号" />-->
        <el-table-column prop="orgName" label="所属单位" />
        <el-table-column prop="role" label="角色">
          <template #default="{ row }">
            {{ roleMap[row.role]?.label }}
          </template>
        </el-table-column>
        <el-table-column prop="createTime" label="创建日期" />
        <el-table-column label="操作" header-align="center" align="center">
          <template #default="{ row }">
            <div v-if="!['manage', 'base'].includes(row.role)" class="text-primary space-x-4">
              <span class="cursor-pointer" @click="showPopover('edit', row)">编辑</span>
              <!--              <span class="cursor-pointer" @click="showPopover('del', row)">删除</span>-->
            </div>
          </template>
        </el-table-column>
      </el-table>
      <div class="flex justify-between items-center">
        <div class="text-sm text-neutral">
          <span>共 {{ Math.ceil(pager.total / pager.pageSize) }} 页，</span>
          <span>{{ pager.total }} 条</span>
        </div>
        <el-pagination
          v-model:current-page="pager.currentPage"
          v-model:page-size="pager.pageSize"
          small
          layout="jumper, prev, pager, next"
          :total="pager.total"
        />
      </div>
    </main>
  </div>
  <vastio-popover v-model="popover.show" :title="popover.title">
    <div class="space-y-6 p-6 px-[80px]">
      <template v-if="popover.type === 'edit'">
        <el-form :model="tableData" label-width="82px" class="grid-filter space-y-4">
          <el-form-item label="账号">
            <el-input disabled :model-value="detailForm.username" clearable placeholder="请输入"></el-input>
          </el-form-item>
          <el-form-item label="姓名">
            <el-input disabled :model-value="detailForm.name" clearable placeholder="请输入"></el-input>
          </el-form-item>
          <el-form-item label="所属单位">
            <el-input disabled :model-value="getGroupByCode(detailForm.orgCode)" clearable placeholder="请输入"></el-input>
          </el-form-item>
          <el-form-item label="角色">
            <el-select v-model="detailForm.role" clearable placeholder="请选择">
              <el-option v-for="role of roleList" :key="role.value" :label="role.label" :value="role.value" />
            </el-select>
          </el-form-item>
        </el-form>
        <div class="space-x-16 text-center">
          <vastio-button type="primary" @click="updateUser">保存</vastio-button>
          <vastio-button type="secondary" @click="hidePopover">取消</vastio-button>
        </div>
      </template>
      <template v-else-if="popover.type === 'del'">
        <p class="text-center">确定删除用户'{{ detailForm.name }}'?</p>
      </template>
    </div>
  </vastio-popover>
</template>

<script setup>
import { reactive, ref, watch } from "vue";
import systemStore from "@/store";
import { systemUser } from "@/api/system";
import { VMessage } from "@/lib/useTips";

const { groupList, roleMap, roleList } = systemStore()
const filterForm = reactive({ name: null, orgId: null });
const tableData = ref([]);
const pager = reactive({ total: 0, currentPage: 1, pageSize: 10 });

const detailForm = ref({ name: '', username: '', phone: '', orgId: '', role: '' })
const popover = reactive({ show: false, title: '', type: '', data: {} })

watch(() => pager.currentPage, () => {
  search();
}, { immediate: true });

const getGroupByCode = (code) => groupList.find(({ value }) => value === code)?.label

function initParams() {
  if (pager.currentPage === 1) {
    search()
  } else {
    pager.currentPage = 1
  }
}

function search() {
  const params = {
    page: pager.currentPage,
    size: pager.pageSize,
    name: filterForm.name,
    orgId: filterForm.orgId,
  };
  systemUser.list(params)
    .then(({ results, total }) => {
      tableData.value = results
      pager.total = total
    })
}

function hidePopover() {
  popover.show = false
}

function showPopover(type, data) {
  const TYPE_MAP = { add: '新增用户', edit: '编辑用户', del: '删除用户' }
  popover.show = true
  popover.type = type
  popover.title = TYPE_MAP[type]
  detailForm.value = { ...data }
}
defineExpose({ showPopover })

function updateUser() {
  if (popover.type === 'edit') {
    systemUser.update({
      userName: detailForm.value.name,
      role: detailForm.value.role
    })
      .then(() => {
        VMessage.success('编辑成功')
        popover.show = false
        search()
      })
  }
  if (popover.type === 'add') {
    systemUser.create(detailForm)
  }
  if (popover.type === 'del') {
    systemUser.delete(detailForm.value.username)
      .then(() => {
        VMessage.success('删除成功')
        popover.show = false
        search()
      })
  }
}
</script>

<style scoped>
::v-deep(.el-form-item--large) {
  @apply mb-0;
}
</style>
<template>
  <div class="p-7 space-y-7">
    <main class="v-shadow v-table bg-base-100 p-5 space-y-6">
      <el-table :data="tableData" stripe style="width: 100%">
        <el-table-column prop="label" label="角色名" />
        <el-table-column prop="explain" label="角色简介" />
      </el-table>
    </main>
  </div>
</template>

<script setup>
import { onBeforeMount, ref } from "vue";
import systemStore from "@/store";

const { roleMap } = systemStore()
const tableData = ref([]);

onBeforeMount(() => {
  tableData.value = Object.values(roleMap).filter(({ label }) => label !== '基础人员')
})
</script>

<style scoped>
::v-deep(.el-form-item--large) {
  @apply mb-0;
}
</style>
<script setup>
import { computed, ref } from "vue";
import { useRouter } from "vue-router";

defineProps({
  menus: {
    type: Array,
    default: () => [],
  },
});

const router = useRouter();
const active = computed(() => router.currentRoute.value.meta.active || router.currentRoute.value.path);

const childActive = ref("");

function handleClick(data) {
  childActive.value = childActive.value === data.id ? "" : data.id;
}
</script>

<template>
  <div v-for="item in menus" :key="item.id">
    <div v-if="item.children && item.children.length">
      <div class="flex cursor-pointer p-5 hover:bg-base-300" @click="handleClick(item)">
        <i v-if="item.icon" class="iconfont" :class="item.icon"></i>
        <span class="ml-5 flex-1">{{ item.name }}</span>
        <i class="iconfont icon-arrow-down transition-all" :class="{ 'rotate-180': childActive === item.id }"></i>
      </div>
      <div
        :style="{
          height: childActive == item.id ? item.children.length * 60 + 'px' : '0px',
        }"
        class="mb-5 overflow-hidden transition-all"
      >
        <router-link v-for="sub in item.children" :key="sub.id" :class="{ active: active === sub.url }" class="flex h-[60px] items-center border-base-100 hover:bg-base-300" :to="sub.url">
          <span class="ml-9 p-5">{{ sub.name }}</span>
        </router-link>
      </div>
    </div>
    <router-link v-else :class="{ active: active === item.url }" class="mb-5 flex h-[60px] items-center border-base-100 hover:bg-base-300" :to="item.url">
      <i v-if="item.icon" class="iconfont ml-5" :class="item.icon"></i>
      <span class="ml-5">{{ item.name }}</span>
    </router-link>
  </div>
</template>

<style lang="less" scoped>
//导航激活样式
.active {
  @apply bg-base-300 text-primary rounded-r;
}
</style>
<template>
  <div class="auto-overflow-y text-sm space-y-4 h-full">
    <ul class="border-dp-blue flex items-center w-full h-8 leading-8 border-l" style="margin-top: 1px;">
      <li
        v-for="indicator in indicators"
        :key="indicator.name"
        class="border-dp-blue text-center truncate border border-l-0 cursor-pointer px-1.5"
        :class="{ 'text-black bg-dp-blue font-semibold': activeIndicator.name === indicator.name}"
        @click="handleTabItemClick(indicator)"
      >
        {{ indicator.name }}：{{ indicator.score }}
      </li>
    </ul>
    <vastio-chart ref="chartRef" height="calc( 100% - 50px )"></vastio-chart>
  </div>
</template>

<script setup>
import { onMounted, ref } from 'vue'
import { getGroupMeasure } from "@/api/stats";

const props = defineProps({
  filter: {
    type: Object,
    default: () => ({})
  }
})
const activeIndicator = ref({})
const indicators = ref()
const chartRef = ref()

onMounted(() => {
  getGroupMeasure(props.filter)
    .then(({ results }) => {
      indicators.value = results
      handleTabItemClick(indicators.value[0])
    })
})

function handleTabItemClick(indicator) {
  activeIndicator.value = indicator
  renderChart(indicator)
}

function renderChart(indicator) {
  // console.log(indicator)
  const list = indicator.items
  const xData = list.map(({ name }) => name)
  const data = list.map(({ score }) => Number(score).toFixed(2))
  const option = {
    tooltip: {
      trigger: 'axis',
      backgroundColor: '#192135',
      borderColor: '#FFFFFF',
      textStyle: { color: '#FFFFFF' },
    },
    grid: {
      top: 12, bottom: 24, left: 24, right: 0
    },
    xAxis: {
      type: 'category',
      axisTick: { show: false },
      splitLine: { show: false },
      alignTicks: true,
      axisLabel: { color: '#FFF' },
      axisLine: { lineStyle: { color: '#FFF' } },
      data: xData
    },
    yAxis: {
      type: "value",
      splitLine: { show: false },
      axisTick: { show: false },
      axisLine: { show: false },
    },
    series: [
      {
        type: 'bar',
        data,
        barMaxWidth: 36,
      }
    ]
  }
  chartRef.value.updateOption(option, { notMerge: true })
}
</script>

<style scoped>

</style>
<template>
  <div class="px-[156px] space-y-7 py-7">
    <top-filter v-model="branchHomeFilter" :role="user.role" @search="search"></top-filter>
    <div class="grid grid-cols-3 gap-x-7">
      <ranking-table class="col-span-1" :filter="branchHomeFilter"></ranking-table>
      <div class="col-span-2">
        <div class="mb-7">
          <vastio-title class="mb-3">各考核项评分</vastio-title>
          <div class="flex text-base-400">
            <div class="auto-overflow-y h-[440px] min-w-[340px] overflow-x-hidden pl-2" style="direction: rtl">
              <div class="space-y-5" style="direction: ltr">
                <div
                  v-for="score in scores.list"
                  :key="score.id"
                  class="flex items-center"
                >
                  <data-card
                    :data="score"
                    class="flex-1 transition-all cursor-pointer"
                    :class="{ 'border border-primary': scores.active === score.id}"
                    @click="getAccessDetail(score.id)"
                  ></data-card>
                  <div class="w-8 rotate-90 -translate-x-3">
                    <vastio-icon
                      v-show="scores.active === score.id"
                      name="a-shouqizhankai-2"
                      color="#4793FE"
                      :size="32"
                    ></vastio-icon>
                  </div>
                </div>
              </div>
            </div>
            <vastio-card class="auto-overflow-y h-[440px] flex-1 rounded p-6">
              <div class="flex items-center">
                <div class="mr-2 h-2 w-2 rounded-full bg-primary"></div>
                <span>各考核项机构评分排名</span>
              </div>
              <vastio-chart ref="rankChartRef" height="360px"></vastio-chart>
            </vastio-card>
          </div>
        </div>
        <div class="grid grid-cols-2 gap-x-7">
          <div class="col-span-1">
            <vastio-title class="mb-3">历史均分趋势</vastio-title>
            <vastio-card class="h-[356px] rounded">
              <vastio-chart ref="historyAvgChartRef" height="100%"></vastio-chart>
            </vastio-card>
          </div>
          <div class="v-table col-span-1">
            <vastio-title class="mb-3">排名上升前五</vastio-title>
            <vastio-card class="custom-height h-[356px] rounded p-6">
              <branch-top-five :month="currentMonth || ''"></branch-top-five>
            </vastio-card>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { onMounted, reactive, ref, watch } from "vue";
import systemStore from "@/store";
import statusStore from "@/store/status";
import dayjs from "dayjs";
import { getGroupMeasure, getOrgYearlyAvgMeasures } from "@/api/stats";
import { storeToRefs } from "pinia";
import RankingTable from "./components/RankingTable.vue";
import BranchTopFive from '../components/BranchTopFive.vue'

const { user } = systemStore()
const { branchHomeFilter } = storeToRefs(statusStore())

/* 考核评分排名表 */
// const ICON_LIST = ['shuxixiaqujichuxinxi', 'zhangwofengxianshibiejineng', 'shanyujiejuetuchuwenti', 'huozaifangkongqingkuang', 'jiangchengjizhi']
const ICON_LIST = ['icon1', 'icon2', 'icon3', 'icon4', 'icon5']
const scores = reactive({ active: '', list: [] })
const rankChartRef = ref(null)

/* 历史均分趋势表 */
const historyAvgChartRef = ref(null)

/* 支队排名上升前五 */
const currentMonth = ref('')

watch(scores, (data) => {
  getAccessDetail(data.active)
}, { deep: true })

onMounted(() => {
  currentMonth.value = branchHomeFilter.value.month
  search(branchHomeFilter.value)
})
/* 更新数据 */
function search(params) {
  const apiParams = getHandledParams(params)
  /* 各考核详情 */
  getMeasures(apiParams)
  /* 历史均分趋势 */
  getHistoryAvg(apiParams)
  /* 排名上升前五 */
  currentMonth.value = apiParams.month
}
/* 获取考核项 */
function getMeasures({ type, month, year }) {
  const params = { type }
  if (type === 'month') params.month = month
  if (type === 'year') params.month = year
  getGroupMeasure(params)
    .then(({ results }) => {
      scores.list = results
        .map(({ id, name, score, items }, index) => ({ id, title: name, value: score.toFixed(2), icon: ICON_LIST[index % ICON_LIST.length], items }))
      scores.active = scores.list[0]?.id
    })
}
// 获取各考核详情
function getAccessDetail(id) {
  scores.active = id
  const items = scores.list.find((item) => item.id === id)?.items
  if (items) {
    const sortedItems = items.sort((a, b) => b.score - a.score)
    const yData = sortedItems.map((item) => item.name.replace('大队', ''))
    const scoreData = sortedItems.map((item) => item.score.toFixed(2))
    const option = {
      tooltip: { trigger: 'axis', axisPointer: { type: 'shadow' } },
      color: ["#73C0DE"],
      grid: { left: '80', right: '28', bottom: '0', top: '30' },
      xAxis: { type: 'value', position: 'top', axisLabel: { color: '#798097' } },
      yAxis: {
        inverse: true,
        type: 'category',
        data: yData,
        axisLine: { show: false },
        axisTick: { show: false },
        axisLabel: {
          align: 'right',
          formatter(value, index) {
            return `{order|${index + 1}}{data|${value}}`
          },
          rich: {
            data: { color: '#2C3349', fontSize: '14px', width: 50 },
            order: {
              width: 20,
              height: 20,
              align: 'center',
              color: '#798098',
              backgroundColor: '#F8F8F8',
              fontSize: '14px',
              borderRadius: 20,
            }
          }
        }
      },
      series: [
        {
          type: 'bar',
          data: scoreData,
          barMinWidth: 20,
          barMaxWidth: 24,
          label: {
            show: true,
            position: 'outside',
            formatter(value) {
              return value.data;
            }
          },
        }
      ],
      // graphic: {
      //   elements: [
      //     { type: 'text', left: 24, top: 8, style: { text: '排名', fontSize: 14 } }
      //   ]
      // }
    }
    rankChartRef.value.updateOption(option)
  }
}

/* 获取历史均分趋势(近6个月) */
function getHistoryAvg(params) {
  let end
  let start
  if (params.type === 'year') {
    end = dayjs().add(-1, "month").format('YYYY-MM')
    start = dayjs().add(-6, "month").format('YYYY-MM')
  } else if (params.type === 'month') {
    end = params.month
    start = dayjs(end).add(-6, "month").format('YYYY-MM')
  }
  getOrgYearlyAvgMeasures({ start, end })
    .then(({ results }) => {
      const { xData, branchAvgScores } = results.reduce((res, { name, score }) => {
        const [year, month] = name.split('-')
        res.xData.push(`${year}年${month}月`)
        res.branchAvgScores.push(score.toFixed(2))
        return res
      }, { xData: [], branchAvgScores: [] })
      const option = {
        grid: { top: 30, bottom: 30, left: 52 },
        tooltip: {
          show: true,
          trigger: 'axis',
          formatter(data) {
            return `${data[0].axisValue}<br />得分：${data[0].data}`
          }
        },
        xAxis: {
          type: 'category',
          data: xData,
          axisLine: { lineStyle: { color: '#404A6B' } },
          axisTick: { show: false },
          axisLabel: {
            formatter: (value) => (`${Number(value.match(/(?<=年).*?(?=月)/))}月`)
          },
        },
        yAxis: {
          type: 'value'
        },
        series: [
          {
            data: branchAvgScores,
            type: 'line',
            smooth: true,
            symbol: 'none',
            areaStyle: { color: 'rgba(221,226,245,0.3)' }
          }
        ]
      }
      historyAvgChartRef.value.updateOption(option)
    })
}

/* 处理参数 */
function getHandledParams(params) {
  let handledParams
  if (params.type === 'month') handledParams = { month: params.month, year: params.month.split('-')[0] }
  if (params.type === 'year') handledParams = { year: params.year }
  handledParams.type = params.type
  return handledParams
}
</script>

<style scoped>
::v-deep(.custom-height .cell) {
  height: 52px;
  line-height: 52px;
}
::v-deep(.v-table .el-table .no-break .cell) {
  text-overflow: unset;
  padding-left: 0;
}
</style>
<template>
  <div class="px-[156px] space-y-7 py-7">
    <top-filter v-model="groupHomeFilter" :role="user.role" @search="search"></top-filter>
    <div>
      <vastio-title class="mb-3">各考核项评分</vastio-title>
      <ul class="mt-4 flex space-x-7">
        <li v-for="(score, index) in scores" :key="index" class="flex-1">
          <data-card :data="score" class="flex-1 transition-all"></data-card>
        </li>
      </ul>
    </div>
    <div>
      <vastio-title class="mb-3">人员评分排名情况</vastio-title>
      <vastio-card class="v-table-no-border px-6 py-4">
        <el-table :data="table.data" cell-class-name="cell-outer" style="width: 100%" @row-click="toMemberDetail">
          <el-table-column type="index" label="排名" min-width="80" align="center">
            <template #header>
              <div class="w-full text-center">排名</div>
            </template>
            <template #default="{ $index }">
              <div class="w-full text-center">
                <div class="inner-bg inline-block h-8 w-8 rounded-full bg-base-200 text-center leading-8">{{ $index + 1 }}</div>
              </div>
            </template>
          </el-table-column>
          <el-table-column prop="name" label="姓名">
            <template #default="{ row }">
              <div>
                <span class="text-base font-semibold">{{ row.name }}</span><br />
                <span class="text-secondary">消防监督员</span>
              </div>
            </template>
          </el-table-column>
          <el-table-column prop="score" label="得分" align="center">
            <template #default="{ row }">
              <div class="flex items-center">
                <span class="text-lg">{{ row.score.toFixed(2) }}</span><br />
                <div v-if="row.rankChange" :class="{ 'rotate-180': false }">
                  <vastio-icon name="direction-up" color="#BDBFCC" :size="10"></vastio-icon>
                </div>
              </div>
            </template>
          </el-table-column>
          <el-table-column label="">
            <template #default>
              <div class="h-[34px] w-px bg-line-200"></div>
            </template>
          </el-table-column>
          <el-table-column v-for="(detail, index) in table.details" :key="index" :label="detail.label" align="center">
            <template #default="{ $index }">
              <span class="text-lg">{{ detail.scores[$index].toFixed(2) }}</span><br />
            </template>
          </el-table-column>
        </el-table>
      </vastio-card>
    </div>
    <div class="grid grid-cols-2 gap-x-7">
      <div class="col-span-1">
        <vastio-title class="mb-3">历史得分趋势</vastio-title>
        <vastio-card class="h-[356px] rounded">
          <vastio-chart ref="historyScoreRef" height="100%"></vastio-chart>
        </vastio-card>
      </div>
      <div class="v-table col-span-1">
        <vastio-title class="mb-3">支队排名上升前五</vastio-title>
        <vastio-card class="custom-height h-[356px] rounded p-6">
          <branch-top-five :month="currentMonth || ''"></branch-top-five>
        </vastio-card>
      </div>
    </div>
  </div>
</template>

<script setup>
import { onMounted, reactive, ref } from "vue";
import systemStore from "@/store";
import statusStore from "@/store/status";
import dayjs from "dayjs";
import { getGroupMeasure, getOrgYearlyScore, getPersonMeasureWithGroup } from "@/api/stats";
import { useRouter } from "vue-router";
import { storeToRefs } from "pinia";
import { handleNum } from "@/lib/public";
import BranchTopFive from '../components/BranchTopFive.vue'

const router = useRouter()
const { user } = systemStore()
const { groupHomeFilter } = storeToRefs(statusStore())

/* 各考核项评分 */
// const ICON_LIST = ['shuxixiaqujichuxinxi', 'zhangwofengxianshibiejineng', 'shanyujiejuetuchuwenti', 'huozaifangkongqingkuang', 'jiangchengjizhi']
const ICON_LIST = ['icon1', 'icon2', 'icon3', 'icon4', 'icon5']
const scores = ref([])
/* 人员评分排名情况 */
const table = reactive({ data: [], details: [] })
/* 历史得分趋势表 */
const historyScoreRef = ref(null)
/* 支队排名上升前五 */
const currentMonth = ref(groupHomeFilter.value.month)

onMounted(() => {
  search(groupHomeFilter.value)
})
/* 处理参数 */
function getHandledParams(params) {
  let handledParams
  if (params.type === 'month') handledParams = { month: params.month, year: params.month.split('-')[0] }
  if (params.type === 'year') handledParams = { year: params.year, month: params.year }
  handledParams.type = params.type
  return handledParams
}

/* 更新数据 */
async function search(params) {
  const handledParams = getHandledParams(params)
  const apiParams = { type: handledParams.type, orgId: user.dwid, month: handledParams.month }
  /* 各考核项评分 */
  await renderMeasuresScore(apiParams)
  /* 人员评分排名情况 */
  renderMemberMeasuresScore(apiParams)
  /* 历史得分趋势 */
  renderHistoryScoringTrend(apiParams)
  /* 支队月度排名 */
  if (apiParams.type === 'year') {
    currentMonth.value = dayjs().format('YYYY-MM')
  } else {
    currentMonth.value = apiParams.month
  }
}

/* 各考核项评分 */
async function renderMeasuresScore(params) {
  const { results } = await getGroupMeasure(params)
  scores.value = results.map((item, index) => ({
    id: item.id,
    title: item.name,
    value: item.score,
    icon: ICON_LIST[index % ICON_LIST.length]
  }))
}
/* 人员评分排名情况 */
function renderMemberMeasuresScore(params) {
  getPersonMeasureWithGroup(params)
    .then(({ results }) => {
      const tempTableData = results.reduce((res, data) => {
        const matchIndex = res.findIndex((item) => item.name === data.name)
        if (matchIndex < 0) {
          res.push({ name: data.name, score: 0, personId: data.id });
          res[res.length - 1].score += data.score
        } else {
          res[matchIndex].score += data.score
        }
        return res
      }, []).sort((a, b) => b.score - a.score)
      const tempTableDetail = scores.value.map((item) => (
        { label: item?.title, scores: [] }
      ))
      tempTableData.forEach((data) => {
        const dataDetail = results.filter((item) => item.name === data.name)
        for (let i = 0; i < tempTableDetail.length; i++) {
          const curDetail = tempTableDetail[i]
          const score = dataDetail.find((item) => item.title === curDetail.label)?.score || 0
          curDetail.scores.push(score)
        }
      })
      table.data = tempTableData
      table.details = tempTableDetail
    })
}
/* 历史得分趋势 */
function renderHistoryScoringTrend(params) {
  let end
  let start
  if (params.type === 'year') {
    end = dayjs().add(-1, "month").format('YYYY-MM')
    start = dayjs().add(-6, "month").format('YYYY-MM')
  } else if (params.type === 'month') {
    end = params.month
    start = dayjs(end).add(-6, "month").format('YYYY-MM')
  }
  getOrgYearlyScore({ start, end })
    .then(({ results }) => {
      const { xData, groupScores, branchAvgScores } = results.reduce((res, { name, score, scoreAvg }) => {
        const [year, month] = name.split('-')
        res.xData.push(`${year}年${month}月`)
        res.groupScores.push(handleNum(score))
        res.branchAvgScores.push(scoreAvg)
        return res
      }, { xData: [], groupScores: [], branchAvgScores: [] })
      const option = {
        color: ['#546FC6', '#72BFDD'],
        legend: { top: 20, icon: 'rect', itemHeight: 2 },
        grid: { top: 80, bottom: 30, left: 52, right: 20 },
        tooltip: { trigger: 'axis' },
        xAxis: {
          type: 'category',
          data: xData,
          axisLine: { lineStyle: { color: '#404A6B' } },
          axisTick: { show: false, alignWithLabel: true },
          axisLabel: {
            formatter: (value) => (`${value.match(/(?<=年).*?(?=月)/)}月`)
          },
          boundaryGap: false
        },
        yAxis: {
          type: 'value',
          scale: true,
          axisLabel: { color: '#BDBFCC' },
        },
        series: [
          { name: '支队平均得分', data: branchAvgScores, type: 'line', smooth: true, symbol: 'circle', },
          { name: '本大队得分', data: groupScores, type: 'line', smooth: true, symbol: 'circle' },
        ]
      }
      historyScoreRef.value.updateOption(option)
    })
}
/* 跳转个人详情 */
function toMemberDetail(row) {
  if (!row.personId) return
  const { month, type } = getHandledParams(groupHomeFilter.value)
  const query = {
    personId: row.personId,
    month,
    type
  }
  router.push({ path: "/homepage/member", query })
}
</script>

<style scoped>

</style>
<script setup>
import { reactive, ref } from "vue";
import { useRouter } from "vue-router";

const props = defineProps({
  menus: {
    type: Array,
    default: () => [],
  },
});

const router = useRouter();
const active = ref();
const emit = defineEmits(["change"]);

initActive(router.currentRoute.value.path);

function initActive(url) {
  const arr = reactive(props.menus);
  active.value = findByUrl(arr, url);
  const obj = arr.find((v) => v.id === active.value);
  emit("change", obj);
}

function findByUrl(arr, url) {
  const obj = arr.find((v) => v.url === url);
  if (obj) {
    return obj.parent || obj.id;
  }
  let temp = [];
  arr.forEach((v) => {
    if (v.children) {
      temp = temp.concat(
        v.children.map((sub) => {
          // 记录第一级的id
          sub.parent = v.parent || v.id;
          return sub;
        })
      );
    }
  });
  if (temp.length) {
    return findByUrl(temp, url);
  }
  return "";
}

function handleClick(data) {
  active.value = data.id;
  if (data.url) {
    router.replace(data.url);
  } else if (data.children) {
    router.replace(data.children[0].url)
  }
  emit("change", data);
}
</script>

<template>
  <div class="flex">
    <template v-for="item in props.menus" :key="item.id">
      <div :class="{ active: active === item.id }" class="flex cursor-pointer items-center p-5 text-secondary hover:bg-base-400/50" @click="handleClick(item)">
        <i v-if="item.icon" class="iconfont" :class="item.icon"></i>
        <span class="ml-2">{{ item.name }}</span>
      </div>
    </template>
  </div>
</template>

<style lang="less" scoped>
//导航激活样式
.active {
  @apply bg-base-400 text-base-100;
}
</style>
<template>
  <div class="div-dp-table">
    <div class="thead">
      <div class="tr">
        <span class="th">排名</span>
        <span class="th">姓名</span>
        <span class="th">所属机构</span>
        <span class="th">得分</span>
      </div>
    </div>
    <div class="tbody relative">
      <div
        v-for="(item, i) in tableData"
        :key="i"
        class="tr font-semibold absolute transition ease-in duration-500"
        :class="{ 'rotate-x-90': !item.show }"
        :style="{top: `${10 * i}%`}"
      >
        <div class="td">
          <template v-if="i === 0">
            <span class="bg-dp-gold text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else-if="i === 1">
            <span class="bg-dp-silver text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else-if="i === 2">
            <span class="bg-dp-coppery text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else>
            <span class="bg-dp-blue text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
        </div>
        <div class="td">{{ item.personName }}</div>
        <div class="td">{{ item.orgName }}</div>
        <div class="td">
          <template v-if="i === 0">
            <span class="text-dp-gold text-lg">{{ item.score }}</span>
          </template>
          <template v-else-if="i === 1">
            <span class="text-dp-silver text-lg">{{ item.score }}</span>
          </template>
          <template v-else-if="i === 2">
            <span class="text-dp-coppery text-lg">{{ item.score }}</span>
          </template>
          <template v-else>
            <span class="text-dp-blue text-lg">{{ item.score }}</span>
          </template>
        </div>
      </div>
    </div>
  </div>
  <table class="dp-table hidden">
    <thead>
      <tr>
        <th>排名</th>
        <th>机构名称</th>
        <th>得分</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="(item, i) in tableData" :key="i" class="font-semibold">
        <td>
          <template v-if="i === 0">
            <span class="bg-dp-gold text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else-if="i === 1">
            <span class="bg-dp-silver text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else-if="i === 2">
            <span class="bg-dp-coppery text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else>
            <span class="bg-dp-blue text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
        </td>
        <td class="">{{ item.orgName }}</td>
        <td>
          <template v-if="i === 0">
            <span class="text-dp-gold text-lg">{{ item.score }}</span>
          </template>
          <template v-else-if="i === 1">
            <span class="text-dp-silver text-lg">{{ item.score }}</span>
          </template>
          <template v-else-if="i === 2">
            <span class="text-dp-coppery text-lg">{{ item.score }}</span>
          </template>
          <template v-else>
            <span class="text-dp-blue text-lg">{{ item.score }}</span>
          </template>
        </td>
      </tr>
    </tbody>
  </table>
</template>

<script setup>
import { ref, watch } from "vue";

const props = defineProps({
  data: {
    type: Array,
    default: () => ([])
  }
})

const tableData = ref([])

watch(() => props.data, (data) => {
  const results = JSON.parse(JSON.stringify(data))
  results.forEach((item) => {
    item.score = Number(item.score).toFixed(2)
    item.show = false
  })
  tableData.value = results.slice(0, 10)
  tableData.value.forEach((item, i) => {
    setTimeout(() => {
      item.show = true
    }, (10 - i) * 1000)
  })
})
</script>

<style scoped>

</style>
<template>
  <div class="div-dp-table">
    <div class="thead">
      <div class="tr">
        <span class="th">排名</span>
        <span class="th">机构名称</span>
        <span class="th">得分</span>
      </div>
    </div>
    <div class="tbody relative">
      <div
        v-for="(item, i) in tableData"
        :key="i"
        class="tr font-semibold absolute transition ease-in duration-500"
        :class="{ 'rotate-x-90': !item.show }"
        style="animation: all"
        :style="{top: `${10 * i}%`}"
      >
        <div class="td">
          <template v-if="i === 0">
            <span class="bg-dp-gold text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else-if="i === 1">
            <span class="bg-dp-silver text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else-if="i === 2">
            <span class="bg-dp-coppery text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else>
            <span class="bg-dp-blue text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
        </div>
        <div class="td">{{ item.orgName }}</div>
        <div class="td">
          <template v-if="i === 0">
            <span class="text-dp-gold text-lg">{{ item.score }}</span>
          </template>
          <template v-else-if="i === 1">
            <span class="text-dp-silver text-lg">{{ item.score }}</span>
          </template>
          <template v-else-if="i === 2">
            <span class="text-dp-coppery text-lg">{{ item.score }}</span>
          </template>
          <template v-else>
            <span class="text-dp-blue text-lg">{{ item.score }}</span>
          </template>
        </div>
      </div>
    </div>
  </div>
  <table class="dp-table hidden">
    <thead>
      <tr>
        <th>排名</th>
        <th>机构名称</th>
        <th>得分</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="(item, i) in tableData" :key="i" class="font-semibold">
        <td>
          <template v-if="i === 0">
            <span class="bg-dp-gold text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else-if="i === 1">
            <span class="bg-dp-silver text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else-if="i === 2">
            <span class="bg-dp-coppery text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
          <template v-else>
            <span class="bg-dp-blue text-dp-black inline-block w-6 h-6 rounded-full leading-6">{{ i + 1 }}</span>
          </template>
        </td>
        <td class="">{{ item.orgName }}</td>
        <td>
          <template v-if="i === 0">
            <span class="text-dp-gold text-lg">{{ item.score }}</span>
          </template>
          <template v-else-if="i === 1">
            <span class="text-dp-silver text-lg">{{ item.score }}</span>
          </template>
          <template v-else-if="i === 2">
            <span class="text-dp-coppery text-lg">{{ item.score }}</span>
          </template>
          <template v-else>
            <span class="text-dp-blue text-lg">{{ item.score }}</span>
          </template>
        </td>
      </tr>
    </tbody>
  </table>
</template>

<script setup>
import { onMounted, ref } from 'vue'
import { getGroupMonthlyRanking } from "@/api/stats";

const props = defineProps({
  filter: {
    type: Object,
    default: () => ({})
  }
})
const tableData = ref([])

onMounted(() => {
  getGroupMonthlyRanking(props.filter)
    .then(({ results }) => {
      results.forEach((item) => {
        item.score = Number(item.score).toFixed(2)
        item.show = false
      })
      tableData.value = results
      tableData.value.forEach((item, i) => {
        setTimeout(() => {
          item.show = true
        }, (10 - i) * 1000)
      })
    })
})
</script>

<style scoped>

</style>
<template>
  <ul class="grid grid-cols-3 gap-5 h-full">
    <li
      v-for="(item, i) in topThree"
      :key="i"
      class="relative p-3 pb-0 text-center"
      style="background: rgba(255, 255, 255, 0.02)"
    >
      <span
        class="absolute top-0 left-0"
        :class="{ 'gold-triangle': i === 0, 'silver-triangle': i === 1, 'coppery-triangle': i === 2 }"
      >
      </span>
      <span class="text-black absolute -top-0.5 left-1 font-semibold text-sm">{{ i + 1 }}</span>
      <p class="border-dp-blue2 inline-block border rounded-full px-2 pb-3 h-7 leading-7">
        <vastio-icon name="user" :size="16" color="#62C1ED" />
        <span class="text-sm ml-1">{{ item.name }}</span>
      </p>
      <vastio-chart ref="chartsRef" height="calc( 100% - 28px )" class="text-left"></vastio-chart>
    </li>
  </ul>
</template>

<script setup>
import { nextTick, ref, watch } from "vue";
import { getMeasureResById } from "@/api/report";

const props = defineProps({
  data: {
    type: Array,
    default: () => ([])
  },
  filter: {
    type: Object,
    default: () => ({})
  }
})

const topThree = ref()

const chartsRef = ref()

watch(() => [props.data, props.filter], ([rankingData, filter]) => {
  const topThreePerson = JSON.parse(JSON.stringify(rankingData)).slice(0, 3)
  if (props.filter.month) {
    Promise.all(topThreePerson.map((cur) => getMeasureResById(cur.personId, filter)))
      .then((results) => {
        topThree.value = renderTopThreeMemberScore(results)
        nextTick(renderCharts)
      })
  }
}, { deep: true })

function renderCharts() {
  topThree.value.forEach((item, i) => {
    const detail = item.detail
    const indicator = detail.map(({ title }) => ({ name: title }))
    const data = detail.map(({ score }) => score)
    const option = {
      grid: { top: 12, left: 48, right: 48, bottom: 12 },
      radar: {
        indicator,
        radius: '60%',
        center: ['50%', '50%'],
        axisName: {
          fontSize: 12,
          color: '#FFFFFF',
          lineHeight: 16,
          formatter: (val) => {
            const index = detail.findIndex((cur) => cur.title === val)
            const score = data[index]
            if ([0, 3].includes(index)) {
              return [val, `{s|${score}}`].join('\n')
            }
            const arr = val
              .replace(/(.{4})/g, '$1 ')
              .split(' ')
              .filter((cur) => cur)
            return [...arr, `{s|${score}}`].join('\n')
          },
          rich: {
            s: {
              color: '#A0DCFF',
              fontSize: 14
            }
          }
        },
        axisLine: {
          show: false
        },
        splitLine: {
          lineStyle: {
            color: '#62C1ED',
            opacity: 0.07
          }
        },
        splitArea: {
          show: true,
          areaStyle: {
            color: [
              'rgba(98, 193, 237, 0.35)',
              'rgba(98, 193, 237, 0.28)',
              'rgba(98, 193, 237, 0.21)',
              'rgba(98, 193, 237, 0.14)',
              'rgba(98, 193, 237, 0.07)',
            ]
          }
        }
      },
      series: [{
        name: `${item.name}各项得分`,
        type: 'radar',
        data: [
          {
            value: data,
            itemStyle: {
              color: '#62C1ED'
            }
          }
        ],
        areaStyle: {
          color: 'rgba(160, 220, 255, 0.25)',
        },
        lineStyle: {
          color: 'rgba(160, 220, 255, 1)',
          width: 1
        },
        symbolSize: 4,
        label: { show: false, }
      }]
    }
    chartsRef.value[i].updateOption(option)
  })
}

function renderTopThreeMemberScore(datas) {
  return datas.map(({ results }) => ({
    name: results[0].name,
    detail: ((res) => {
      const result = res
        .filter(({ level }) => level === 1)
        .map(({ code, title }) => ({ code, title }))
      const items = res.filter(({ type }) => type === 'item')
      result.forEach((measure) => {
        measure.score = Number(
          items
            .filter(({ code }) => code.startsWith(measure.code))
            .map(({ score }) => Number(score))
            .reduce((acc, cur) => acc + cur, 0)
        ).toFixed(2)
      })
      return result
    })(results[0].measureResults)
  }))
}
</script>

<style scoped>
.gold-triangle {
  width: 0;
  height: 0;
  border-top: 28px solid #EDC662;
  border-right: 28px solid transparent;
}
.silver-triangle {
  width: 0;
  height: 0;
  border-top: 28px solid #A7C6E3;
  border-right: 28px solid transparent;
}
.coppery-triangle {
  width: 0;
  height: 0;
  border-top: 28px solid #CB7747;
  border-right: 28px solid transparent;
}
</style>
<template>
  <el-table :data="tableData" stripe cell-class-name="custom-height">
    <el-table-column prop="name" label="姓名" />
    <el-table-column prop="group" label="所属大队" />
    <el-table-column prop="sypm" label="上月排名" align="center" label-class-name="no-break" />
    <el-table-column prop="bypm" label="本月排名" align="center" label-class-name="no-break" />
    <el-table-column prop="ssmc" label="上升名次" align="center" label-class-name="no-break" />
  </el-table>
</template>

<script setup>
import { ref, watch } from "vue";
import { getMemberMonthlyRanking } from "@/api/stats";
import dayjs from "dayjs";

const props = defineProps({
  month: {
    type: String,
    required: true
  }
})

watch(() => props.month, (month) => {
  if (month) renderRankChangeTopFive(month)
  if (!month) {
    const defaultMonth = dayjs().format('YYYY-MM')
    renderRankChangeTopFive(defaultMonth)
  }
}, { immediate: true })

const tableData = ref([])

function renderRankChangeTopFive(month) {
  // 2022-10
  getMemberMonthlyRanking({ month })
    .then(({ results }) => {
      tableData.value = results
        .sort((a, b) => b.rankChange - a.rankChange)
        .slice(0, 5)
        .map(({ personName, orgName, rank, rankChange }) => {
          const sypm = rank + rankChange
          return { name: personName, group: orgName, sypm, bypm: rank, ssmc: rankChange }
        })
    })
}
</script>

<style scoped>

</style>
<template>
  <table class="dp-table">
    <tbody>
      <tr v-for="(item, i) in tableData" :key="i">
        <td>
          <span class="bg-dp-silver text-dp-black inline-block min-w-[48px] px-2 h-6 rounded font-semibold py-1">
            {{ item.score }}分
          </span>
        </td>
        <td>{{ item.personName }}</td>
        <td>{{ item.title }}</td>
      </tr>
    </tbody>
  </table>
</template>

<script setup>
import { onBeforeMount, ref } from 'vue'
import { getAllMetricScore } from "@/api/stats";

const props = defineProps({
  filter: {
    type: Object,
    default: () => ({})
  }
})
const tableData = ref([])
onBeforeMount(() => {
  getAllMetricScore({ code: '05', ...props.filter })
    .then(({ results }) => {
      tableData.value = results.slice(0, 10)
      results.forEach((item, i) => {
        if (i >= 10) {
          setTimeout(() => {
            tableData.value.unshift(item)
          }, 1000 * (i - 10))
        }
      })
    })
})
</script>

<style scoped>
.dp-table ::v-deep(tr:nth-child(odd)) {
  background-color: rgba(98, 193, 237, 0.04) !important;
}
.dp-table ::v-deep(tr:nth-child(even)) {
  background-color: transparent !important;
}
</style>
<template>
  <div class="px-[156px] space-y-7 py-7">
    <top-filter v-if="!isOther" v-model="filter" role="member" @search="search"></top-filter>
    <div class="grid grid-cols-3 gap-x-7">
      <div class="col-span-1">
        <vastio-title class="mb-3">个人考核详情</vastio-title>
        <vastio-card class="p-2">
          <div class="flex h-[99px] items-start justify-evenly rounded-sm bg-base-200 py-4">
            <div class="pl-4">
              <div class="mb-3 h-6">
                <span class="text-lg font-semibold">{{ info.name }}</span>
                <span class="text-sm text-neutral"> - 消防监督员</span>
              </div>
              <div class="rounded-full border border-primary bg-base-300 text-center text-primary h-6 leading-6">{{ info.groupName }}</div>
            </div>
            <div class="flex-1 flex justify-evenly">
              <div class="h-[59px] w-px bg-line-200"></div>
              <div class="text-center">
                <p class="mb-2 h-6 text-sm leading-loose">得分</p>
                <span class="text-xl">{{ info.score?.toFixed(2) || '0.00' }}</span>
              </div>
              <div class="h-[59px] w-px bg-line-200"></div>
              <div class="text-center">
                <p class="mb-2 h-6 text-sm leading-loose">排名</p>
                <p>
                  <span v-if="info.rank"><span class="text-xl">{{ info.rank }}</span>/{{ memberCount }}</span>
                  <span v-else>暂无</span>
                </p>
              </div>
            </div>
          </div>
          <div class="p-2">
            <div class="auto-overflow-x h-12 w-full">
              <vastio-tab v-model="info.tabActive" class="custom-tab" gapless :list="info.measures" @change="tabChange"></vastio-tab>
            </div>
            <div>
              <div class="mt-2 flex h-8 text-sm leading-8 text-neutral">
                <span class="flex-1">考核指标</span>
                <span class="w-[100px] text-center">得分</span>
                <span class="w-[80px] text-center">排名</span>
              </div>
              <div class="h-px w-full bg-line-200"></div>
              <ul class="auto-overflow-y h-[700px] relative">
                <li v-for="(measure, index) in info.measures" :id="ID_PRE + measure.value" :key="index">
                  <div class="flex items-center justify-between space-x-4 py-5 text-sm text-secondary">
                    <div class="h-px w-full flex-1 bg-line-100"></div>
                    <span>{{ measure.label }}</span>
                    <div class="h-px w-full flex-1 bg-line-100"></div>
                  </div>
                  <ul class="space-y-5">
                    <li v-for="(detail, i) in measure.detail" :key="i">
                      <div class="mt-2 flex text-sm">
                        <div class="flex-1 truncate flex items-center space-x-2">
                          <span class="truncate" :title="detail.label">{{ detail.label }}</span>
                          <el-tooltip placement="right" effect="light">
                            <vastio-icon name="pingfenxize" :size="16" color="#4794FE"></vastio-icon>
                            <template #content>
                              <div class="max-w-[198px]">评分规则<br />{{ detail.description }}</div>
                            </template>
                          </el-tooltip>
                        </div>
                        <div class="w-[100px] text-center text-primary">
                          <el-popover
                            v-if="filter.type === 'month' && getDetailList(detail).length > 0"
                            placement="bottom"
                            trigger="click"
                            width="320px"
                          >
                            <template #reference>
                              <span class="underline cursor-pointer">{{ detail.score }}</span>
                            </template>
                            <ul class="divide-line-100 px-3 divide-y">
                              <li v-for="metric in getDetailList(detail)" :key="metric.id" class="flex py-2">
                                <div class="w-2 h-2 mr-2 rounded bg-primary mt-1"></div>
                                <div class="w-full">
                                  <p>{{ metric.prefix || '' }} {{ metric.value }} {{ metric.suffix || '' }}</p>
                                  <ul>
                                    <li v-for="file in metric.files" :key="file.id" class="flex">
                                      <span class="truncate text-neutral">{{ file.filename }}</span>
                                      <span
                                        class="ml-4 underline text-primary cursor-pointer"
                                        style="flex-basis: 40px;"
                                        @click="downloadFile(file.id)"
                                      >下载</span>
                                    </li>
                                  </ul>
                                </div>
                              </li>
                            </ul>
                          </el-popover>
                          <el-popover
                            v-else-if="filter.type === 'year' && getYearlyDetailList(detail).length > 0"
                            placement="bottom"
                            trigger="click"
                            width="196px"
                          >
                            <template #reference>
                              <span class="underline cursor-pointer">{{ handleNum(detail.score) }}</span>
                            </template>
                            <ul class="px-3">
                              <li v-for="data in getYearlyDetailList(detail)" :key="data.id" class="flex items-center">
                                <div class="w-2 h-2 mr-2 rounded bg-primary mb-1"></div>
                                <div class="border-b border-line-100 flex-1 py-2 flex justify-between">
                                  <span class="text-base-content">{{ data.month }}月</span>
                                  <span class="min-w-[70px] text-neutral">得分：{{ handleNum(data.score) }}</span>
                                </div>
                              </li>
                            </ul>
                            <div class="text-center mt-2 text-base-content">累计得分：{{ handleNum(detail.score) }}</div>
                          </el-popover>
                          <span v-else>{{ handleNum(detail.score) || 0 }}</span>
                        </div>
                        <div class="w-[80px] text-center">{{ detail.rank || '暂无' }}</div>
                      </div>
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </vastio-card>
      </div>
      <div class="col-span-2">
        <vastio-title class="mb-3">排名变化</vastio-title>
        <vastio-card>
          <vastio-chart ref="rankChangeChartRef" height="256px"></vastio-chart>
        </vastio-card>
        <vastio-title class="mb-3 mt-7">工作分析</vastio-title>
        <vastio-card class="p-6">
          <vastio-chart ref="workQualityChartRef" height="198px"></vastio-chart>
          <div class="my-5 flex items-center">
            <span class="mr-2 h-2 w-2 rounded-full bg-primary"></span>
            <span>待改进指标</span>
          </div>
          <div class="v-table-no-border">
            <el-table :data="workingQuality.table" max-height="300px" cell-class-name="cell-outer" style="width: 100%">
              <el-table-column prop="detail" label="考核指标">
                <template #default="{ row }">
                  <span class="text-sm font-semibold">{{ row.topTitle }}</span>
                  <span> - </span>
                  <span v-if="row.path">{{ row.path }} - </span>
                  <span class="text-sm">{{ row.title }}</span>
                </template>
              </el-table-column>
              <el-table-column prop="score" label="得分" width="80" align="center"></el-table-column>
              <el-table-column prop="maxScore" label="支队最高分" width="120" align="center"></el-table-column>
              <el-table-column prop="avgScore" label="支队均分" width="100" align="center"></el-table-column>
              <el-table-column prop="note" label="改进建议" width="100" align="center">
                <template #default="{ row }">
                  <span class="cursor-pointer text-primary" @click="showNote(row)">查看</span>
                </template>
              </el-table-column>
            </el-table>
          </div>
        </vastio-card>
      </div>
    </div>
  </div>
  <vastio-popover v-model="notePopover.show" :title="notePopover.title">
    <p class="py-7 max-w-[520px] text-center" style="text-indent: 2em">
      <span v-if="notePopover.data.note">{{ notePopover.data.note }}</span>
      <span v-else>暂无改进意见</span>
    </p>
  </vastio-popover>
</template>

<script setup>
import { onBeforeMount, reactive, ref } from "vue";
import { downloadReportFile, getMeasureResById } from "@/api/report";
import dayjs from "dayjs";
import systemStore from "@/store";
import { getSelfMemberMonthRanking } from "@/api/stats";
import { VLoading } from "@/lib/useTips";
import { useRoute } from "vue-router";
import { handleNum } from "@/lib/public";

const { user, memberCount, groupList } = systemStore()
const route = useRoute()
const ID_PRE = 'item_'
const isOther = ref(false)
const filter = reactive({
  type: 'month',
  month: dayjs().add(-1, 'month').format('YYYY-MM')
})
/* 个人考核详情 */
const info = reactive({ name: '', groupName: '', score: 0, rank: '', tabActive: '', measures: [] })
/* 排名变化 */
const rankChangeChartRef = ref(null)
/* 工作分析 */
const workQualityChartRef = ref(null)
const workingQuality = reactive({
  table: []
})
const notePopover = reactive({
  show: false,
  title: '',
  data: {}
})

onBeforeMount(() => {
  if (route.query.personId) {
    isOther.value = true
    filter.month = route.query.month
    filter.type = route.query.type
    filter.personId = route.query.personId
  } else {
    filter.personId = user.personId
  }
  search(filter)
})

function tabChange(val) {
  const localDom = document.querySelector(`#${ID_PRE}${val}`)
  if (localDom) {
    localDom.parentNode.scrollTo({ top: localDom.offsetTop, behavior: 'smooth' })
  }
}

/* 更新数据 */
async function search(params) {
  /* 处理参数 */
  const personId = params.personId || route.query.personId || user.personId
  const apiParams = { type: params.type, month: params[params.type] || params.month, personId }
  updateBaseInfo(apiParams)
  getYearlyRanking(apiParams)
}

/* 个人考核信息 和 工作分析图表 */
function updateBaseInfo(params) {
  // getMeasureRes(params)
  const loading = VLoading.start()
  getMeasureResById(params.personId, params)
    .then(({ results }) => {
      const baseInfo = results[0];
      ({ name: info.name, score: info.score, rank: info.rank } = baseInfo);
      info.groupName = groupList.find(({ value }) => value === baseInfo.orgId)?.label || ' '
      const { measureResults: measures } = baseInfo
      const tempInfoMeasures = []
      measures.forEach((item) => {
        if (!item.parent && item.type === 'group') {
        // 一级指标
          tempInfoMeasures.push({ label: item.title, value: item.code, detail: [] })
        } else if (item.type === 'item') {
          const parentMeasure = tempInfoMeasures.find((measure) => item.code.startsWith(measure.value))
          if (parentMeasure) {
            const { title: label, personMonthItem, personYearItem } = item
            const { score, rank } = personMonthItem || personYearItem || {}
            parentMeasure.detail.push({ ...item, label, score, rank })
          }
        }
      })
      /* 个人考核详情数据 */
      info.measures = tempInfoMeasures
      info.tabActive = tempInfoMeasures[0].value
      /* 工作分析图表 */
      updateWorkQualityChart(tempInfoMeasures)
      /* 待改进指标 */
      renderImprovedMeasures(measures)
    })
    .finally(() => {
      VLoading.close(loading)
    })
}

/* 排名变化 */
function getYearlyRanking(params) {
  let start; let end
  if (params.type === 'year') {
    end = dayjs().add(-1, "month").format('YYYY-MM')
    start = dayjs().startOf('year').format('YYYY-MM')
  } else if (params.type === 'month') {
    end = params.month
    start = dayjs(end).add(-6, "month").format('YYYY-MM')
  }
  getSelfMemberMonthRanking({ type: 'month', start, end, personId: params.personId })
    .then(({ results }) => {
      const option = {
        color: ['#4794FE'],
        legend: { top: 20, icon: 'rect', itemHeight: 2 },
        grid: { top: 50, bottom: 30, left: 52, right: 32 },
        tooltip: { show: true, trigger: 'axis', },
        xAxis: {
          type: 'category',
          data: results.map((item) => {
            const [year, month] = item.month.split('-')
            return `${year}年${month}月`
          }),
          axisLine: { lineStyle: { color: '#404A6B' }, onZero: false },
          axisTick: { show: false, alignWithLabel: true },
          axisLabel: {
            formatter: (value) => (`${Number(value.match(/(?<=年).*?(?=月)/))}月`)
          },
          boundaryGap: false,
        },
        yAxis: {
          type: 'value',
          axisLabel: { color: '#BDBFCC' },
          splitLine: { show: false },
          inverse: true,
        },
        series: [
          {
            name: '排名',
            data: results.map((item) => item.rank || 0),
            type: 'line',
            symbol: 'circle',
          }
        ]
      }
      rankChangeChartRef.value.updateOption(option)
    })
}

/* 工作分析图表 */
function updateWorkQualityChart(measures) {
  const option = {
    color: ['#6DA9FF', '#546FC6'],
    legend: { top: 0 },
    grid: { top: 40, bottom: 20, left: 32, right: 32 },
    tooltip: {
      show: true,
      trigger: 'axis',
    },
    xAxis: {
      type: 'category',
      data: measures.map((item) => item.label),
      axisLine: { lineStyle: { color: '#404A6B' } },
      axisTick: { show: false, alignWithLabel: true },
    },
    yAxis: [
      {
        name: '完成指标数',
        type: 'value',
        axisLabel: { color: '#BDBFCC' },
        splitLine: { show: false },
      },
      {
        name: '得分',
        type: 'value',
        axisLabel: { color: '#BDBFCC', },
        splitLine: { show: false },
      }
    ],
    series: [
      {
        name: '完成指标数',
        data: measures.map((item) => item.detail.reduce((total, cur) => {
          if (cur.score > 0) return total + 1
          return total
        }, 0)),
        type: 'bar',
        barMaxWidth: 36
      },
      {
        name: '得分',
        data: measures.map((item) => item.detail.reduce((total, cur) => total + cur.score || 0, 0)),
        type: 'line',
        yAxisIndex: 1,
        symbol: 'line',
      },
    ]
  }
  workQualityChartRef.value.updateOption(option)
}
/* 待改进指标 */
function renderImprovedMeasures(measures) {
  workingQuality.table = measures.filter(({ type }) => type === 'item')
    .sort((a, b) => b.score - a.score)
    .slice(-5)
    .map((item) => {
      const path = renderPathLabel(measures, item.code)
        .slice(1)
        .join('-')
      return {
        ...item,
        path,
        avgScore: handleNum(item.avgScore),
        maxScore: handleNum(item.maxScore),
        score: handleNum(item.score) }
    })
}
/* 根据末级code生成完整路径 */
function renderPathLabel(list, code) {
  const pathLabel = []
  for (let i = -2; i > -code.length; i -= 2) {
    const parentCode = code.slice(0, i)
    const parentLabel = list.find((item) => item.code === parentCode).title
    pathLabel.unshift(parentLabel)
  }
  return pathLabel
}
/* 处理分数详情列表 */
function getDetailList(data) {
  try {
    const { prefix, suffix, ratingMetrics } = data
    const metric = ratingMetrics
      .map(({ id, value, ratingMetricFiles }) => ({
        prefix,
        suffix,
        id,
        value,
        files: ratingMetricFiles?.map((file) => ({
          id: file.id,
          filename: file.filename
        })) || []
      }))
    return metric
  } catch (e) {
    console.log(e);
    return []
  }
}
/* 处理年度分数弹窗 */
function getYearlyDetailList(data) {
  try {
    return data.personMonthItems
      .map(({ month, score }) => ({ month: Number(month.split('-')[1]), score }))
      .sort((a, b) => a.month - b.month)
  } catch (e) {
    console.log(e);
    return []
  }
}
// /* 处理需展示的结果 */
// function renderResult(result, method) {
//   if (method === 'option') {
//     const list = JSON.parse(result) || []
//     return list.join("-");
//   }
//   return result
// }
/* 下载文件 */
function downloadFile(fileId) {
  if (fileId) window.open(downloadReportFile(fileId))
}
function showNote(data) {
  notePopover.title = '改进意见'
  notePopover.show = true
  notePopover.data = data
}
</script>

<style scoped lang="less">
::v-deep(.custom-tab.tab__gapless .tab-item) {
@apply rounded-none;
}
::v-deep(.custom-tab .tab-item) {
@apply bg-base-100 border-t border-b border-l border-line-200;
  &:last-child {
    @apply border-r;
  }
  &.active {
    background: #4794FE;
    border: none;
    @apply bg-primary border-none;
  }
}
::v-deep(.v-table-no-border .el-table) {
  .cell-outer .cell{
    @apply h-10;
  }
  th {
  @apply border-b-0;
    .cell {
    @apply py-2 border-t border-b border-line-200;
    }
  }
  .cell {
    @apply px-2;
  }
  .is-center .cell {
  @apply text-center justify-center;
  }
}
::v-deep(.el-popover) {
  @apply p-0;
}
</style>
<template>
  <div class="space-x-6">
    <el-input-number v-model="datas.score" :precision="2" :controls="false" style="width: 128px;" placeholder="输入分值" />
    <span class="text-xs text-secondary">加分填正数，扣分填负数</span>
  </div>
</template>

<script setup>
import { ref, watch } from "vue";

const props = defineProps({
  modelValue: {
    type: String,
    default: "{\"score\":0.2}"
  }
})
const datas = ref({ score: 0 })
watch(() => props.modelValue, (val) => {
  if (!val) {
    datas.value = { score: 0 }
    return
  }
  datas.value = JSON.parse(val)
}, { immediate: true, deep: true })

defineExpose({ datas })
</script>

<style scoped>

</style>
<template>
  <table class="dp-table">
    <thead>
      <tr>
        <th>姓名</th>
        <th>所属大队</th>
        <th>上月排名</th>
        <th>本月排名</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="(item, i) in tableData" :key="i">
        <td class="font-semibold">{{ item.personName }}</td>
        <td>{{ item.orgName }}</td>
        <td>{{ item.rank + item.rankChange }}</td>
        <td>{{ item.rank }}</td>
      </tr>
    </tbody>
  </table>
</template>

<script setup>
import { ref, watch } from "vue";

const props = defineProps({
  data: {
    type: Array,
    default: () => ([])
  }
})
const tableData = ref([])

watch(() => props.data, (results) => {
  tableData.value = JSON.parse(JSON.stringify(results))
    .sort((a, b) => b.rankChange - a.rankChange)
    .slice(0, 10)
})
</script>

<style scoped>
</style>
<template>
  <div class="grid-filter min-w-[840px]" style="width:clamp(50vw, 1120px,60vw);">
    <el-form ref="formRef" :model="measure" label-width="100px" :rules="rules">
      <form-subtitle>指标设置</form-subtitle>
      <div class="py-4 px-[100px] space-y-2">
        <el-form-item label="名称" prop="title">
          <el-input v-model="measure.title" placeholder="请输入指标名称"></el-input>
        </el-form-item>
        <el-form-item label="描述">
          <div class="flex w-full">
            <el-input v-model="measure.prefix" placeholder="描述前缀"></el-input>
            （<span class="shrink-0 text-secondary">填报内容</span>）
            <el-input v-model="measure.suffix" placeholder="描述后缀"></el-input>
          </div>
        </el-form-item>
        <el-form-item label="数据来源" prop="source">
          <el-radio-group v-model="measure.source">
            <el-radio label="input">人工填报</el-radio>
            <el-radio label="collect">系统抽取</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="多条输入" prop="multiple">
          <el-radio-group v-model="measure.multiple">
            <el-radio :label="1">是</el-radio>
            <el-radio :label="0">否</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="最高分值" prop="scoreMax">
          <el-input-number v-model="measure.scoreMax" :precision="2" :controls="false" style="width: 128px;" placeholder="输入分值" />
          <span class="text-secondary ml-2">分</span>
        </el-form-item>
      </div>
      <form-subtitle>评分配置</form-subtitle>
      <div class="py-4 px-[100px] space-y-2">
        <el-form-item label="评分方式" prop="scoreMethod">
          <el-select v-model="measure.scoreMethod" style="width: 240px;" @change="initScoreRule">
            <el-option
              v-for="item in filterScoreMethod"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            />
          </el-select>
        </el-form-item>
        <el-form-item v-show="measure.scoreMethod !== 'direct'" label="评分标准">
          <component :is="componentMap[measure.scoreMethod]" ref="scoreMethodRef" :model-value="measure.scoreRule"></component>
        </el-form-item>
        <el-form-item label="评分规则">
          <div class="flex w-full">
            <el-input v-model="measure.description" :rows="2" type="textarea"></el-input>
          </div>
        </el-form-item>
      </div>
      <form-subtitle>改进建议</form-subtitle>
      <div class="py-4 px-[100px]">
        <el-form-item label="改进建议">
          <el-input v-model="measure.note" :rows="1" type="textarea" />
        </el-form-item>
      </div>
    </el-form>
  </div>
</template>

<script setup>
import { reactive, ref, watch } from "vue";
import systemStore from "@/store";
import FormSubtitle from "./FormSubtitle.vue"
import ScoreFixed from "./ScoreFixed.vue";
import ScoreScale from "./ScoreScale.vue";
import ScoreStep from "./ScoreStep.vue"
import ScoreOption from "./ScoreOption.vue"
import ScoreCompare from "./ScoreCompare.vue"

const { scoreMethodOption } = systemStore()
const filterScoreMethod = scoreMethodOption.filter(({ source }) => source === 'all')
const props = defineProps({
  data: {
    type: Object,
    default: () => ({
      title: '',
      source: 'input',
      multiple: 0,
      scoreMethod: 'direct',
      note: '',
      scoreMax: null,
      scoreRule: '',
      suffix: '',
      prefix: '',
      description: ''
    })
  }
})

const formRef = ref(null)
const scoreMethodRef = ref()
const componentMap = { fixed: ScoreFixed, scale: ScoreScale, step: ScoreStep, option: ScoreOption, compare: ScoreCompare }
const measure = ref({
  title: '',
  source: 'input',
  multiple: 0,
  scoreMethod: 'direct',
  note: '',
  scoreMax: null,
  scoreRule: '', /* 规则JSON串 */
  suffix: '',
  prefix: '',
  description: ''
})

const rules = reactive({
  title: [
    { required: true, message: '请输入指标名称', trigger: 'blur' }
  ],
  scoreMax: [
    { required: true, message: '请输入最高分值', trigger: 'blur' }
  ],
})

watch(() => props.data, (val) => {
  measure.value = { ...val, scoreMax: Number(val.scoreMax) || null }
}, { immediate: true, deep: true })

function getFormData() {
  return new Promise((resolve) => {
    formRef.value.validate((valid) => {
      if (valid) {
        if (scoreMethodRef.value) measure.value.scoreRule = JSON.stringify(scoreMethodRef.value.datas)
        resolve(measure.value)
      }
    })
  })
}

function initScoreRule() {
  measure.value.scoreRule = ''
}

defineExpose({ getFormData })
</script>

<style scoped>

</style>
<template>
  <div class="auto-overflow-y custom-tree-icon space-y-2 max-h-[300px] pr-2">
    <el-tree
      :data="datas"
      node-key="id"
      :expand-on-click-node="false"
      default-expand-all
    >
      <template #default="{ node, data }">
        <div class="flex items-center">
          <el-input v-model="data.option" placeholder="选项名"></el-input>
          <el-input-number v-if="node.isLeaf" v-model="data.score" class="ml-4" :precision="2" :controls="false" style="width: 168px;" placeholder="分值" />
          <span class="text-secondary ml-2">分</span>
          <div class="h-[40px] w-px bg-line-200 mx-6"></div>
          <div class="space-x-4">
            <vastio-icon name="xinzeng" color="#404A6B" class="cursor-pointer" @click="addOption(node)"></vastio-icon>
            <vastio-icon name="xinzengxiaji" color="#404A6B" class="cursor-pointer" @click="addOptionChild(data)"></vastio-icon>
            <vastio-icon name="shanchu" color="#404A6B" class="cursor-pointer" @click="delOption(node)"></vastio-icon>
          </div>
        </div>
      </template>
    </el-tree>
  </div>
</template>

<script setup>
import { ref, watch } from "vue";

const props = defineProps({
  modelValue: {
    type: String,
    default: '[{"option":"","score":null}]'
  }
})
const BASE_DATA = { option: '', score: null }
const datas = ref([])
watch(() => props.modelValue, (val) => {
  if (!val) {
    datas.value = [{ id: getTimeStamp(), ...BASE_DATA }]
    return
  }
  datas.value = JSON.parse(val)
}, { immediate: true, deep: true })

/* 新增 */
function addOption(node) {
  const { level, data: parentData } = node.parent
  if (level === 0) {
    parentData.push({ ...BASE_DATA, id: getTimeStamp() })
  } else {
    if (!parentData.children) parentData.children = []
    parentData.children.push({ ...BASE_DATA, id: getTimeStamp() })
  }
  datas.value = [...datas.value]
}
/* 新增子节点 */
function addOptionChild(parentData) {
  if (!parentData.children) parentData.children = []
  parentData.children.push({ ...BASE_DATA, id: getTimeStamp() })
  datas.value = [...datas.value]
}
/* 删除 */
function delOption(node) {
  const delId = node.data.id
  const parentData = node.parent.data
  if (node.parent.level === 0 && parentData.length <= 1) return
  if (node.parent.level === 0) {
    const delIndex = parentData.findIndex(({ id }) => delId === id)
    parentData.splice(delIndex, 1)
  } else {
    const delIndex = parentData.children.findIndex(({ id }) => delId === id)
    parentData.children.splice(delIndex, 1)
  }
  datas.value = [...datas.value]
}
/* 获取时间戳 */
function getTimeStamp() {
  return new Date().getTime()
}

defineExpose({ datas })
</script>

<style lang="less" scoped>
::v-deep(.is-current) {
  & > .el-tree-node__content {
    background-color: #fff !important;
  }
}
::v-deep(.el-tree-node__content) {
  &:hover {
    background-color: #fff !important;
  }
}
</style>
<template>
  <div class="grid-gap-2 grid-cols-3 grid w-full">
    <div>
      <span>大于均值：</span>
      <el-input-number v-model="datas.greater" :precision="2" :controls="false" style="width: 128px;" placeholder="输入分值" />
    </div>
    <div>
      <span>等于均值：</span>
      <el-input-number v-model="datas.equals" :precision="2" :controls="false" style="width: 128px;" placeholder="输入分值" />
    </div>
    <div>
      <span>小于均值：</span>
      <el-input-number v-model="datas.less" :precision="2" :controls="false" style="width: 128px;" placeholder="输入分值" />
    </div>
    <span class="text-xs text-secondary">加分填正数，扣分填负数</span>
  </div>
</template>

<script setup>
import { ref, watch } from "vue";

const props = defineProps({
  modelValue: { type: String, default: "{\"greater\":0,\"equals\":0,\"less\":0}" }
})
const datas = ref(null)
watch(() => props.modelValue, (val) => {
  if (!val) {
    datas.value = { greater: 0, equals: 0, less: 0 }
    return
  }
  datas.value = JSON.parse(val)
}, { immediate: true, deep: true })

defineExpose({ datas })
</script>

<style scoped>

</style>
<template>
  <div class="auto-overflow-y custom-tree-icon space-y-2 max-h-[300px] pr-2">
    <template v-for="(data, index) in datas" :key="index">
      <div class="flex items-center">
        <span class="shrink-0 mr-2">选项{{ index + 1 }}</span>
        <el-input v-model="data.option" placeholder="选项名"></el-input>
        <el-input-number v-model="data.score" class="ml-4" :precision="2" :controls="false" style="width: 168px;" placeholder="分值" />
        <span class="text-secondary ml-2">分</span>
        <div class="h-[40px] w-px bg-line-200 mx-6"></div>
        <div class="space-x-4">
          <vastio-icon name="xinzeng" color="#404A6B" class="cursor-pointer" @click="addOption(index)"></vastio-icon>
          <vastio-icon v-show="datas.length > 1" name="shanchu" color="#404A6B" class="cursor-pointer" @click="delOption(index)"></vastio-icon>
        </div>
      </div>
    </template>
  </div>
</template>

<script setup>
import { ref, watch } from "vue";

const props = defineProps({
  modelValue: {
    type: String,
    default: '[{"option":"","score":null}]'
  }
})
const datas = ref([])
watch(() => props.modelValue, (val) => {
  if (!val) {
    datas.value = [{ option: '', score: null }]
    return
  }
  datas.value = JSON.parse(val)
}, { immediate: true, deep: true })

/* 新增 */
function addOption(index) {
  datas.value.splice(index + 1, 0, { option: '', score: null })
}
/* 删除 */
function delOption(delIndex) {
  datas.value.splice(delIndex, 1)
}

defineExpose({ datas })
</script>

<style lang="less" scoped>
::v-deep(.is-current) {
  & > .el-tree-node__content {
    background-color: #fff !important;
  }
}
::v-deep(.el-tree-node__content) {
  &:hover {
    background-color: #fff !important;
  }
}
</style>
<template>
  <div class="space-y-2">
    <div v-for="(step, index) in datas" :key="index" class="flex items-center">
      <span class="mr-2">分段{{ index+1 }}</span>
      <el-input-number v-model="step.domain[0]" :precision="2" :controls="false" style="width: 128px;" placeholder="起始值" />
      <span class="mx-2">~</span>
      <el-input-number v-model="step.domain[1]" :precision="2" :controls="false" style="width: 128px;" placeholder="结束值" />
      <el-input-number v-model="step.score" class="ml-4" :precision="2" :controls="false" style="width: 128px;" placeholder="分值" />
      <span class="text-secondary ml-2">分</span>
      <div class="h-[40px] w-px bg-line-200 mx-6"></div>
      <div class="space-x-4">
        <vastio-icon name="xinzeng" color="#404A6B" class="cursor-pointer" @click="addStep"></vastio-icon>
        <vastio-icon name="shanchu" color="#404A6B" class="cursor-pointer" @click="delStep(index)"></vastio-icon>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, watch } from "vue";

const props = defineProps({
  modelValue: {
    type: String,
    default: '[{"domain":[null,null],"score":null}]'
  }
})
const datas = ref([])
watch(() => props.modelValue, (val) => {
  if (!val) {
    datas.value = [{ domain: [null, null], score: null }]
    return
  }
  datas.value = JSON.parse(val)
}, { immediate: true, deep: true })

/* 新增 */
function addStep() {
  datas.value.push({ domain: [null, null], score: null })
}
/* 删除 */
function delStep(i) {
  datas.value.splice(i, 1)
}

defineExpose({ datas })
</script>

<style scoped>

</style>
<template>
  <p class="space-x-2 flex items-center min-h-[46px] px-7 border-y border-line-200">
    <span class="w-2 h-2 bg-primary rounded"></span>
    <span class="font-semibold text-sm"><slot></slot></span>
  </p>
</template>
<template>
  <div>
    <div class="h-full space-y-6">
      <div class="flex justify-end space-x-4">
        <top-hint v-if="user.role === 'member'" class="flex-1">请于{{ endTime }}前完成事项填报，超期将导致无法填报</top-hint>
        <vastio-button v-if="user.role === 'member'" type="primary" @click="saveAll">全部保存</vastio-button>
        <vastio-button type="primary" @click="submitReport">提交</vastio-button>
        <div v-if="user.role !== 'member'" class="btn-secondary btn" @click="goBack">返回</div>
      </div>
      <ul class="auto-overflow-y space-y-6 pr-2 relative" style="max-height: calc( 100% - 62px )">
        <li v-for="(item, itemIndex) in itemList" :id="renderItemId(item.parentCode)" :key="item.parentCode">
          <span class="mb-6 inline-block text-xs text-secondary">{{ item.pathLabel }}</span>
          <ul class="space-y-6">
            <li v-for="(itemData,index) in item.list" :key="index" class="rounded-sm border border-line-200">
              <report-edit-item
                ref="editItem"
                :data="itemData"
                :member-id="memberId"
                :month="month"
                @save-data="updateData(itemIndex, index, $event)"
              ></report-edit-item>
            </li>
          </ul>
        </li>
      </ul>
    </div>
    <vastio-popover v-model="popup.show" :title="popup.title" width="454px">
      <div class="px-20 pt-10 pb-12 text-center">
        <span v-if="user.role === 'member'">提交后将无法修改填报内容，请确认是否提交？</span>
        <span v-else>确认提交？</span>
        <div class="mt-10 space-x-8">
          <vastio-button type="primary" @click="popupOpt('sure')">确定</vastio-button>
          <vastio-button type="secondary" @click="popupOpt('cancel')">取消</vastio-button>
        </div>
      </div>
    </vastio-popover>
  </div>
</template>

<script setup>
import { computed, reactive, ref, watch } from "vue";
import { useRouter } from "vue-router";
import systemStore from "@/store";
import { commitRating, leaderModifyCommit, saveRatingMetric } from "@/api/report";
import { VMessage } from "@/lib/useTips";
import dayjs from "dayjs";
import ReportEditItem from "./ReportEditItem.vue";

const router = useRouter()
const props = defineProps({
  list: { type: Array, default: () => [] }, // 数据列表
  scrollId: { type: String, default: '' }, // 滚动id
  memberId: { type: [String, Number], default: '' }, // 人员Id
  month: { type: [String, Number], default: '' } // 人员Id
})

const { user, commitDate } = systemStore()
/* 截止日趋 */
const endTime = computed(() => {
  const nextMonth = dayjs(props.month).add(1, 'month').month() + 1
  return `${nextMonth}月${commitDate}日`
})
/* 数据列表 */
const itemList = ref([])
watch(() => props.list, (value) => {
  itemList.value = value
}, { immediate: true })

const ID_PRE = 'item_edit_' // id前置
const editItem = ref(null) // 子组件实例
/* 弹出框 */
const popup = reactive({ show: false, title: '提示' })

/* 事件 */
const emit = defineEmits(['update:list', 'onSubmit', 'onSaveAll'])

watch(() => props.scrollId, (val) => {
  const localDom = document.querySelector(`#${ID_PRE}${val}`)
  if (localDom) {
    localDom.parentNode.scrollTo({ top: localDom.offsetTop, behavior: 'smooth' })
  }
})

/* 更新列表数据 */
function updateData(itemIndex, detailIndex, newData) {
  itemList.value[itemIndex].list[detailIndex] = newData
}
/* 全部保存 */
function saveAll() {
  const params = editItem.value.reduce((total, detail) => {
    const detailVal = detail.value
    if (detailVal.isModified) {
      const ratingMetrics = detailVal.ratingMetrics
      ratingMetrics.forEach((metric) => {
        // let resultValue = metric.value
        // if (detailVal.scoreMethod === 'option' && metric.value) {
        //   resultValue = JSON.stringify(metric.value)
        // }
        total.push({
          id: metric.id,
          measureId: detailVal.id,
          value: metric.value,
          month: props.month,
          personId: props.memberId,
          files: metric.ratingMetricFiles
            .filter((file) => file.attr === 'new')
            .map((file) => ({
              filename: file.filename,
              path: file.path
            }))
        })
      })
    }
    return total
  }, [])
  if (params.length > 0) {
    saveRatingMetric(params)
      .then(() => {
        VMessage.success('保存成功')
        emit('onSaveAll')
      })
  } else {
    VMessage.info('未检测到修改纪录，无需全部保存')
  }
}
/* 提交确认 */
function submitReport() {
  popup.show = true
}
/* 提交弹窗操作 */
function popupOpt(option) {
  if (option === 'sure') {
    const publicParams = {
      month: props.month,
      personId: props.memberId,
    }
    if (user.role === 'member') {
      for (let i = 0; i < editItem.value.length; i++) {
        const cur = editItem.value[i]
        if (cur.value.isModified) {
          VMessage.warning('存在未保存事项，请全部保存后提交')
          popup.show = false
          return
        }
      }
      commitRating(publicParams)
        .then(() => {
          ElMessage.success('提交成功！')
          emit('onSubmit')
        })
    } else {
      const params = editItem.value.reduce((total, detail) => {
        const detailVal = detail.value
        if (detailVal.isModified) {
          console.log(detailVal);
          const ratingMetrics = detailVal.ratingMetrics
          ratingMetrics.forEach((item) => {
            // let resultValue = item.value
            // if (detailVal.scoreMethod === 'option' && item.value) {
            //   resultValue = JSON.stringify(item.value)
            // }
            total.push({
              id: item.id,
              measureId: detailVal.id,
              value: item.value,
              month: props.month,
              personId: props.memberId,
              files: item.ratingMetricFiles
                .filter((file) => file.attr === 'new')
                .map((file) => ({
                  filename: file.filename,
                  path: file.path
                }))
            })
          })
        }
        return total
      }, [])
      const reqParams = { ...publicParams, params }
      leaderModifyCommit(reqParams)
        .then(() => {
          ElMessage.success('提交成功！')
          emit('onSubmit')
        })
    }
  }
  popup.show = false
}
/* 生成id */
function renderItemId(id) {
  return ID_PRE + id
}
/* 回退 */
function goBack() {
  router.go(-1)
}
</script>

<style lang="less" scoped>
.is-required::before {
  @apply text-error mr-1;
  content: "*";
}
</style>
<template>
  <!--    标题    -->
  <div class="flex min-h-[40px] items-center bg-[#eff1f4] px-6 text-sm font-semibold">{{ detail.title }}</div>
  <!--    事项列表    -->
  <ul class="px-6">
    <li v-for="(item, index) in detail.ratingMetrics" :key="index" class="grid-filter border-b border-line-200 py-4">
      <div class="flex space-x-5">
        <div class="flex flex-1 items-center text-sm">
          <span class="mr-6 flex items-center space-x-2">
            <span v-if="detail.prefix">{{ detail.prefix }}</span>
            <template v-if="detail.scoreMethod === 'option'">
              <div class="w-[200px]">
                <el-select v-model="item.value" filterable clearable placeholder="请选择" @change="changeDetailIsModified">
                  <el-option v-for="option in handleOptions(detail.scoreRule)" :key="option.option" :label="option.option" :value="option.option" />
                </el-select>
                <!--                <el-cascader-->
                <!--                  v-model="item.value"-->
                <!--                  :options="handleOptions(detail.scoreRule)"-->
                <!--                  filterable-->
                <!--                  :props="cascadeProps"-->
                <!--                  placeholder="请选择"-->
                <!--                  @change="changeDetailIsModified"-->
                <!--                />-->
              </div>
            </template>
            <template v-else-if="detail.scoreMethod === 'fixed'">
              <div class="min-w-[180px]">
                <el-input v-model="item.value" @change="changeDetailIsModified"></el-input>
              </div>
            </template>
            <template v-else-if="['scale', 'step', 'compare'].includes(detail.scoreMethod)">
              <div class="w-[100px]">
                <input-number
                  v-model="item.value"
                  :min="0"
                  :max="handleInputNumberMax(detail)"
                  @change="changeDetailIsModified"
                ></input-number>
              </div>
            </template>
            <template v-else-if="'direct' === detail.scoreMethod">
              <div class="w-[100px]">
                <input-number v-model="item.value" :min="-Infinity" :max="handleInputNumberMax(detail)" @change="changeDetailIsModified"></input-number>
              </div>
              <span class="text-xs text-secondary">加分填正数，扣分填负数</span>
            </template>
            <span v-if="detail.suffix">{{ detail.suffix }}</span>
          </span>
          <span class="is-required mr-3">附件：</span>
          <el-upload
            :file-list="item.ratingMetricFiles"
            action="/api/upload/file"
            :show-file-list="false"
            :on-success="(res, file) => uploadFileSuccess(res, file, index)"
          >
            <button-with-icon class="mr-4">
              <vastio-icon name="shangchuan" color="#404A6B" :size="18" class="mr-3"></vastio-icon>
              <span>上传附件</span>
            </button-with-icon>
          </el-upload>
          <ul>
            <li v-for="(file,i) in item.ratingMetricFiles" :key="i">
              <span class="mr-4 cursor-pointer" @click="downloadFile(file.id)">{{ file.filename || '默认文件名称' }}</span>
              <span class="cursor-pointer text-primary" @click="deleteFile(file.id, index, i)">删除</span>
            </li>
          </ul>
        </div>
        <div v-if="detail.multiple === 1" class="flex w-[68px] items-center space-x-4 border-l border-line-200 pl-5">
          <vastio-icon
            v-for="opt in renderOptList(index, detail.ratingMetrics.length)"
            :key="opt"
            :name="ICON_MAP[opt]"
            color="#404A6B"
            :size="16"
            class="cursor-pointer"
            @click="handleOption(item, opt, index)"
          ></vastio-icon>
        </div>
      </div>
    </li>
  </ul>
  <!--    按钮    -->
  <div v-if="user.role === 'member'" class="my-4 text-center">
    <vastio-button type="primary" @click="updateDetail">保存</vastio-button>
  </div>
</template>

<script setup>
import { ref, watch } from "vue";
import { deleteRatingMetric, deleteReportFile, downloadReportFile, saveRatingMetric } from "@/api/report";
import systemStore from "@/store";
import { VMessage } from "@/lib/useTips";

const { user } = systemStore()
/*
* fixed 固定分数 input
* direct, scale, step 有scoreMax number
* option select
* */

/* 图标映射 */
const ICON_MAP = { add: 'xinzeng', del: 'shanchu' }
// const cascadeProps = { value: 'label' }
const props = defineProps({
  data: { type: Object, required: true, default: () => {} },
  memberId: { type: [String, Number], default: '' }, // 人员Id
  month: { type: String, default: '' } // 日期
})
/* 详情数据 */
const detail = ref({})
/* 事件 */
const emit = defineEmits(['saveData'])

watch(() => props.data, (data) => {
  const metrics = data.ratingMetrics
  //   .map((item) => {
  //   if (data.scoreMethod === 'option' && item.value) {
  //     return { ...item, value: JSON.parse(item.value) }
  //   }
  //   return item
  // })
  detail.value = { ...data, isModified: false, ratingMetrics: metrics }
}, { immediate: true })

/* 暴露detail */
defineExpose(detail)
/* option: add添加 | del删除 */
function handleOption(item, option, index) {
  switch (option) {
    case "add":
      detail.value.ratingMetrics.push({
        value: "",
        ratingMetricFiles: []
      });
      break;
    case "del":
      if (item.id) deleteRatingMetric(item.id)
      detail.value.ratingMetrics.splice(index, 1);
      break;
    default:
      throw new Error("无此操作");
  }
}
/* 上传成功 */
function uploadFileSuccess(res, file, detailIndex) {
  const filename = file.name
  const path = res.message
  detail.value.ratingMetrics[detailIndex].ratingMetricFiles.push({ filename, path, attr: 'new' })
  changeDetailIsModified()
}
/* 删除文件 */
function deleteFile(fileId, detailIndex, itemIndex) {
  const ratingMetricFiles = detail.value.ratingMetrics[detailIndex].ratingMetricFiles
  if (fileId) {
    // 已保存的文件删除
    deleteReportFile(fileId)
      .then(() => {
        console.log(ratingMetricFiles);
        ratingMetricFiles.splice(itemIndex, 1)
      })
  } else {
    // 未保存的文件删除
    ratingMetricFiles.splice(itemIndex, 1)
  }
  changeDetailIsModified()
}
/* 修改状态变更 */
function changeDetailIsModified() {
  detail.value.isModified = true
}
/* 保存数据 */
function updateDetail() {
  if (detail.value.isModified) {
    const data = detail.value.ratingMetrics
    const handledData = data.map((item) => {
      const resultValue = item.value
      // if (data.scoreMethod === 'option' && item.value) {
      //   resultValue = JSON.stringify(item.value)
      // }
      return {
        files: item.ratingMetricFiles.filter((file) => file.attr === "new"),
        id: item.id || null,
        measureId: detail.value.id,
        value: resultValue,
        personId: props.memberId,
        month: props.month
      }
    })
    saveRatingMetric(handledData)
      .then(({ results }) => {
        detail.value.isModified = false
        emit('saveData', results[0])
        VMessage.success('保存成功')
      })
  }
}
/* 下载文件 */
function downloadFile(fileId) {
  if (fileId) window.open(downloadReportFile(fileId))
}
/* 生成可选操作数组 */
function renderOptList(index, length) {
  if (length === 1) return ['add']
  if (index + 1 === length) return ['add', 'del']
  return ['del']
}
/* 处理选择题的options */
function handleOptions(options) {
  return JSON.parse(options)
  // .map(({ option }) => ({ label: option, value: option }))
}
/* 处理可输入的最大值 */
function handleInputNumberMax({ scoreMethod, scoreMax, scoreRule }) {
  /* 'direct', 'scale', 'step', 'compare' */
  const DEFAULT_MAX = 9999
  try {
    if (scoreMethod === 'direct') return scoreMax
    if (scoreMethod === 'scale') return JSON.parse(scoreRule).domain[1]
    if (scoreMethod === 'step') return Math.max(...JSON.parse(scoreRule).map(({ domain }) => domain[1]))
  } catch (e) {
    console.log(e);
    return DEFAULT_MAX
  }
  return DEFAULT_MAX
}
/* 处理可输入的最小值 */
// function handleInputNumberMin({ scoreMethod, scoreRule }) {
//   /* 'direct', 'scale', 'step', 'compare' */
//   const DEFAULT_MIN = 0
//   try {
//     if (scoreMethod === 'direct') return DEFAULT_MIN
//     if (scoreMethod === 'scale') return JSON.parse(scoreRule).domain[0]
//     if (scoreMethod === 'step') return Math.max(...JSON.parse(scoreRule).map(({ domain }) => domain[0]))
//   } catch (e) {
//     console.log(e);
//     return DEFAULT_MIN
//   }
//   return DEFAULT_MIN
// }
</script>

<style lang="less" scoped>

</style>
<template>
  <div>
    <div class="h-full space-y-6">
      <div v-if="hintContent" class="flex justify-end space-x-4">
        <top-hint class="flex-1">{{ hintContent }}</top-hint>
      </div>
      <ul class="auto-overflow-y space-y-6 pr-2 relative" style="height: calc( 100% - 66px );">
        <li v-for="item in list" :id="renderItemId(item.parentCode)" :key="item.parentCode">
          <span class="mb-6 inline-block text-xs text-secondary">{{ item.pathLabel }}</span>
          <ul class="space-y-6">
            <li v-for="cur in item.list" :id="renderItemId(cur.id)" :key="cur.id" class="rounded-sm border border-line-200">
              <!--    标题    -->
              <div class="flex min-h-[40px] items-center bg-[#eff1f4] px-6 text-sm font-semibold">{{ cur.title }}</div>
              <!--    事项列表    -->
              <ul class="px-6">
                <li v-for="(metric, index) in cur.ratingMetrics" :key="index" class="grid-filter border-b border-line-200 py-4">
                  <div class="flex space-x-5">
                    <div v-if="metric.value || (metric.ratingMetricFiles && metric.ratingMetricFiles.length > 0)" class="flex flex-1 items-center text-sm">
                      <div v-if="metric.value" class="mr-6">
                        <span v-if="cur.prefix">{{ cur.prefix }}</span>
                        <span class="min-w-0 underline">{{ metric.value }}</span>
                        <span v-if="cur.suffix">{{ cur.suffix }}</span>
                      </div>

                      <span class="is-required mr-3">附件：</span>
                      <ul v-if="metric.ratingMetricFiles && metric.ratingMetricFiles.length > 0">
                        <li v-for="(file,i) in metric.ratingMetricFiles" :key="i">
                          <span class="mr-4 cursor-pointer">{{ file.filename || '默认文件名' }}</span>
                          <span class="cursor-pointer text-primary" @click="downloadFile(file.id)">下载</span>
                        </li>
                      </ul>
                      <div v-else>无</div>
                    </div>
                    <div v-else class="text-sm">该指标不涉及或暂未填报</div>
                  </div>
                </li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </div>
</template>

<script setup>
import { computed, watch } from "vue";
import { downloadReportFile } from "@/api/report";
import dayjs from "dayjs";

const props = defineProps({
  list: { type: Array, default: () => [] },
  commitData: { type: Object, default: () => {} },
  scrollId: { type: String, default: '' }
})

const ID_PRE = 'item_show_'
const hintContent = computed(() => {
  const data = props.commitData
  if (data) {
    const { commitUser, commitTime } = data
    const localDate = dayjs(commitTime).format('YYYY年MM月DD日')
    if (commitUser === 'system') {
      return `系统已于${localDate}自动提交本月度绩效考核，提交后无法修改`
    }
    return `您已于${localDate}提交本月度绩效考核，提交后无法修改`
  }
  return ''
})
/* 监听事件 */
watch(() => props.scrollId, (val) => {
  const localDom = document.querySelector(`#${ID_PRE}${val}`)
  if (localDom) {
    localDom.parentNode.scrollTo({ top: localDom.offsetTop, behavior: 'smooth' })
  }
})
/* 下载文件 */
function downloadFile(fileId) {
  if (fileId) window.open(downloadReportFile(fileId))
}
/* 生成id */
function renderItemId(id) {
  return ID_PRE + id
}
</script>

<style scoped>

</style>
<template>
  <div class="space-y-2">
    <div class="space-x-2">
      <span>输入范围</span>
      <el-input-number v-model="datas.domain[0]" :precision="2" :controls="false" style="width: 128px;" placeholder="起始值" />
      <span>~</span>
      <el-input-number v-model="datas.domain[1]" :precision="2" :controls="false" style="width: 128px;" placeholder="结束值" />
    </div>
    <div class="space-x-2">
      <span>得分范围</span>
      <el-input-number v-model="datas.score[0]" :precision="2" :controls="false" style="width: 128px;" placeholder="起始值" />
      <span>~</span>
      <el-input-number v-model="datas.score[1]" :precision="2" :controls="false" style="width: 128px;" placeholder="结束值" />
    </div>
  </div>
</template>

<script setup>
import { ref, watch } from "vue";

const props = defineProps({
  modelValue: {
    type: String,
    default: '{"domain":[null,null],"score":[null,null]}'
  }
})
const datas = ref({})
watch(() => props.modelValue, (val) => {
  if (!val) {
    datas.value = { domain: [null, null], score: [null, null] }
    return
  }
  datas.value = JSON.parse(val)
}, { immediate: true, deep: true })

defineExpose({ datas })
</script>

<style scoped>

</style>
<template>
  <div>
    <div class="mb-6 flex space-x-2">
      <el-input v-model="filter.text" placeholder="请输入关键字..." :prefix-icon="Filter" @keyup.enter="filterTreeNode" />
      <vastio-button type="primary" style="width: 62px !important;min-width: unset;" class="px-4" @click="filterTreeNode">确定</vastio-button>
    </div>
    <el-tree
      ref="treeRef"
      class="auto-overflow custom-tree-icon"
      :data="treeData"
      style="max-height: calc( 100% - 64px )"
      default-expand-all
      :filter-node-method="filterNode"
      @current-change="handleTreeCurrentChange"
    >
      <template #default="{ data }">
        <div
          class="flex h-10 cursor-pointer items-center justify-between pr-5 leading-10"
        >
          <span class="h-full">{{ data.label }}</span>
        </div>
      </template>
    </el-tree>
  </div>
</template>

<script setup>
import { reactive, ref } from "vue";
import { Filter } from '@element-plus/icons-vue'

defineProps({
  treeData: {
    type: Array,
    default: () => []
  },
  checkedId: {
    type: String,
    default: ''
  }
})

const treeRef = ref(null)

const emit = defineEmits(['update:checkedId'])

const filter = reactive({
  text: ''
})

/* 选中更新 */
function handleTreeCurrentChange(item) {
  emit('update:checkedId', item.code)
}
/* 节点过滤 */
function filterTreeNode() {
  treeRef.value.filter(filter.text)
}
function filterNode(value, data) {
  if (!value) return true
  return data.label.includes(value)
}
</script>

<style lang="less" scoped>
::v-deep(.el-input__wrapper) {
  @apply rounded-sm;
}
/* 树样式修改 */
::v-deep(.el-input__wrapper) {
@apply rounded-sm;
}
::v-deep(.is-leaf) {
  .iconfont {
  @apply hidden;
  }
}
/* 树样式修改 */
::v-deep(.el-tree-node) {
@apply mt-2;
}
::v-deep(.el-tree-node__label) {
@apply flex-1;
}
::v-deep(.el-tree-node__content) {
@apply h-auto;
}
::v-deep(.is-current) > .el-tree-node__content {
@apply bg-base-300 text-primary;
  & .node-number {
  @apply text-primary-content bg-primary;
  }
}
</style>
<template>
  <div>
    <vastio-tab v-model="tableFilter.activeTab" :list="tableFilter.list"></vastio-tab>
    <vastio-card class="p-6">
      <div v-show="tableFilter.activeTab === 'member'" class="grid-filter mb-4">
        <el-select v-model="tableFilter.group">
          <el-option v-for="item in options" :key="item.value" :label="item.label" :value="item.value" />
        </el-select>
      </div>
      <div class="v-table-no-border" :style="{ height: tableFilter.activeTab === 'member' ? '758px' : '814px' }">
        <el-table
          :data="tableData"
          cell-class-name="cell-outer"
          class="w-full"
          :max-height="tableFilter.activeTab === 'member' ? '758px' : '814px'"
          @row-click="toDetail"
        >
          <el-table-column type="index" label="排名" min-width="80" header-align="center">
            <template #default="{ $index }">
              <div class="w-full text-center">
                <div class="inner-bg inline-block h-8 w-8 rounded-full bg-base-200 text-center leading-8">{{ $index + 1 }}</div>
              </div>
            </template>
          </el-table-column>
          <el-table-column v-if="tableFilter.activeTab === 'member'" prop="name" label="姓名">
            <template #default="{ row }">
              <div>
                <span class="text-base font-semibold">{{ row.name }}</span><br />
                <span class="text-secondary">消防监督员</span>
              </div>
            </template>
          </el-table-column>
          <el-table-column prop="group" label="所属大队" />
          <el-table-column prop="score" label="得分">
            <template #default="{ row }">
              <div class="w-full flex items-center space-x-2">
                <span class="text-lg font-semibold w-[50px] whitespace-nowrap text-right">{{ Number(row.score).toFixed(2) }}</span>
                <div class="w-3" :class="{ 'rotate-180': row.rankChange < 0 }">
                  <vastio-icon v-show="row.rankChange" name="direction-up" color="#BDBFCC" :size="10"></vastio-icon>
                  <vastio-icon v-show="!row.rankChange" name="minus" color="#BDBFCC" :size="10"></vastio-icon>
                </div>
              </div>
            </template>
          </el-table-column>
        </el-table>
      </div>
    </vastio-card>
    <vastio-popover v-model="popover.show" :title="popover.title">
      <div class="p-6">
        <vastio-chart ref="historyScoreRef" height="400px" width="600px"></vastio-chart>
      </div>
    </vastio-popover>
  </div>
</template>

<script setup>
import { nextTick, reactive, ref, watch } from "vue";
import { useRouter } from "vue-router";
import systemStore from "@/store";
import {
  getGroupMonthlyRanking,
  getGroupYearlyRanking,
  getMemberMonthlyRanking,
  getMemberYearlyRanking,
  getOrgYearlyScore
} from "@/api/stats";
import dayjs from "dayjs";

const router = useRouter()
const { groupList } = systemStore()
const props = defineProps({
  filter: {
    type: Object,
    default: () => ({ type: '', year: '', month: '' })
  }
})

const options = [{ value: '', label: '全部' }].concat(JSON.parse(JSON.stringify(groupList)))
/* 人员、机构切换tab */
const tableFilter = reactive({
  activeTab: 'member',
  list: [
    { value: "member", label: "人员排名" },
    { value: "group", label: "机构排名" },
  ],
  group: ''
})

const tableData = ref([])
const popover = reactive({ show: false, title: '大队历史得分趋势' })
/* 历史得分趋势表 */
const historyScoreRef = ref(null)

watch(
  () => [props.filter, tableFilter.activeTab, tableFilter.group],
  ([params, activeTab, group]) => {
    const handledParams = getHandledParams(params)
    renderTable(handledParams, activeTab, group)
  },
  { immediate: true, deep: true }
)

/* 渲染表格 */
function renderTable(params, tabVal, group) {
  if (params.type === 'month' && tabVal === 'member') {
    getMemberMonthlyRanking({ month: params.month, orgId: group })
      .then(({ results }) => {
        updateTableData(results)
      })
    return
  }
  if (params.type === 'year' && tabVal === 'member') {
    getMemberYearlyRanking({ year: params.year, orgId: group })
      .then(({ results }) => {
        updateTableData(results)
      })
    return;
  }
  if (params.type === 'month' && tabVal === 'group') {
    getGroupMonthlyRanking({ month: params.month })
      .then(({ results }) => {
        updateTableData(results)
      })
    return;
  }
  if (params.type === 'year' && tabVal === 'group') {
    getGroupYearlyRanking({ year: params.year })
      .then(({ results }) => {
        updateTableData(results)
      })
  }
}
function updateTableData(data) {
  tableData.value = data
    .map(({ personName, orgName, score, rankChange, personId, orgId }) => ({
      name: personName,
      group: orgName,
      score,
      rankChange,
      personId,
      orgId }
    ))
    .sort((a, b) => b.score - a.score)
}
/* 处理参数 */
function getHandledParams(params) {
  if (!params.type) return {}
  let handledParams
  if (params.type === 'month') handledParams = { month: params.month, year: params.month.split('-')[0] }
  if (params.type === 'year') handledParams = { month: params.year, year: params.year }
  handledParams.type = params.type
  return handledParams
}
/* 跳转个人详情 */
function toDetail(row) {
  const currentTab = tableFilter.activeTab
  if (currentTab === 'member') {
    if (!row.personId) return
    const filter = getHandledParams(props.filter)
    const query = {
      personId: row.personId,
      month: filter.month,
      type: filter.type
    }
    router.push({ path: "/homepage/member", query })
  } else if (currentTab === 'group') {
    popover.show = true
    popover.title = `${row.group}历史得分趋势`
    const apiParams = { ...props.filter, orgId: row.orgId }
    renderHistoryScoringTrend(apiParams, row.group)
  }
}
/* 历史得分趋势 */
function renderHistoryScoringTrend(params, groupName) {
  let end
  let start
  if (params.type === 'year') {
    end = dayjs().add(-1, "month").format('YYYY-MM')
    start = dayjs().add(-6, "month").format('YYYY-MM')
  } else if (params.type === 'month') {
    end = params.month
    start = dayjs(end).add(-6, "month").format('YYYY-MM')
  }
  getOrgYearlyScore({ start, end, orgId: params.orgId })
    .then(({ results }) => {
      const { xData, groupScores, branchAvgScores } = results.reduce((res, { name, score, scoreAvg }) => {
        const [year, month] = name.split('-')
        res.xData.push(`${year}年${month}月`)
        res.groupScores.push(score)
        res.branchAvgScores.push(scoreAvg)
        return res
      }, { xData: [], groupScores: [], branchAvgScores: [] })
      const option = {
        color: ['#546FC6', '#72BFDD'],
        legend: { top: 20, icon: 'rect', itemHeight: 2 },
        grid: { top: 80, bottom: 30, left: 52, right: 20 },
        tooltip: { trigger: 'axis' },
        xAxis: {
          type: 'category',
          data: xData,
          axisLine: { lineStyle: { color: '#404A6B' } },
          axisTick: { show: false, alignWithLabel: true },
          axisLabel: {
            formatter: (value) => (`${value.match(/(?<=年).*?(?=月)/)}月`)
          },
          boundaryGap: false
        },
        yAxis: {
          type: 'value',
          scale: true,
          axisLabel: { color: '#BDBFCC' },
        },
        series: [
          { name: '支队平均得分', data: branchAvgScores, type: 'line', smooth: true, symbol: 'circle', },
          { name: `${groupName}得分`, data: groupScores, type: 'line', smooth: true, symbol: 'circle' },
        ]
      }
      nextTick(() => {
        historyScoreRef.value.updateOption(option)
      })
    })
}
</script>

<style scoped>

</style>
